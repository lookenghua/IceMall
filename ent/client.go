// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"ice-mall/ent/migrate"

	"ice-mall/ent/aftermarket"
	"ice-mall/ent/annex"
	"ice-mall/ent/captcha"
	"ice-mall/ent/categorybanner"
	"ice-mall/ent/datadictionarykey"
	"ice-mall/ent/datadictionaryvalue"
	"ice-mall/ent/feedback"
	"ice-mall/ent/homebanner"
	"ice-mall/ent/message"
	"ice-mall/ent/messageread"
	"ice-mall/ent/notification"
	"ice-mall/ent/order"
	"ice-mall/ent/orderitem"
	"ice-mall/ent/popularsearch"
	"ice-mall/ent/product"
	"ice-mall/ent/productattributekey"
	"ice-mall/ent/productattributevalue"
	"ice-mall/ent/productbrowsehistory"
	"ice-mall/ent/productcategory"
	"ice-mall/ent/productcollection"
	"ice-mall/ent/productevaluation"
	"ice-mall/ent/productfocus"
	"ice-mall/ent/productspecs"
	"ice-mall/ent/receivingaddress"
	"ice-mall/ent/shoppingcart"
	"ice-mall/ent/systemconfig"
	"ice-mall/ent/user"
	"ice-mall/ent/userintegral"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Aftermarket is the client for interacting with the Aftermarket builders.
	Aftermarket *AftermarketClient
	// Annex is the client for interacting with the Annex builders.
	Annex *AnnexClient
	// Captcha is the client for interacting with the Captcha builders.
	Captcha *CaptchaClient
	// CategoryBanner is the client for interacting with the CategoryBanner builders.
	CategoryBanner *CategoryBannerClient
	// DataDictionaryKey is the client for interacting with the DataDictionaryKey builders.
	DataDictionaryKey *DataDictionaryKeyClient
	// DataDictionaryValue is the client for interacting with the DataDictionaryValue builders.
	DataDictionaryValue *DataDictionaryValueClient
	// Feedback is the client for interacting with the Feedback builders.
	Feedback *FeedbackClient
	// HomeBanner is the client for interacting with the HomeBanner builders.
	HomeBanner *HomeBannerClient
	// Message is the client for interacting with the Message builders.
	Message *MessageClient
	// MessageRead is the client for interacting with the MessageRead builders.
	MessageRead *MessageReadClient
	// Notification is the client for interacting with the Notification builders.
	Notification *NotificationClient
	// Order is the client for interacting with the Order builders.
	Order *OrderClient
	// OrderItem is the client for interacting with the OrderItem builders.
	OrderItem *OrderItemClient
	// PopularSearch is the client for interacting with the PopularSearch builders.
	PopularSearch *PopularSearchClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// ProductAttributeKey is the client for interacting with the ProductAttributeKey builders.
	ProductAttributeKey *ProductAttributeKeyClient
	// ProductAttributeValue is the client for interacting with the ProductAttributeValue builders.
	ProductAttributeValue *ProductAttributeValueClient
	// ProductBrowseHistory is the client for interacting with the ProductBrowseHistory builders.
	ProductBrowseHistory *ProductBrowseHistoryClient
	// ProductCategory is the client for interacting with the ProductCategory builders.
	ProductCategory *ProductCategoryClient
	// ProductCollection is the client for interacting with the ProductCollection builders.
	ProductCollection *ProductCollectionClient
	// ProductEvaluation is the client for interacting with the ProductEvaluation builders.
	ProductEvaluation *ProductEvaluationClient
	// ProductFocus is the client for interacting with the ProductFocus builders.
	ProductFocus *ProductFocusClient
	// ProductSpecs is the client for interacting with the ProductSpecs builders.
	ProductSpecs *ProductSpecsClient
	// ReceivingAddress is the client for interacting with the ReceivingAddress builders.
	ReceivingAddress *ReceivingAddressClient
	// ShoppingCart is the client for interacting with the ShoppingCart builders.
	ShoppingCart *ShoppingCartClient
	// SystemConfig is the client for interacting with the SystemConfig builders.
	SystemConfig *SystemConfigClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserIntegral is the client for interacting with the UserIntegral builders.
	UserIntegral *UserIntegralClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Aftermarket = NewAftermarketClient(c.config)
	c.Annex = NewAnnexClient(c.config)
	c.Captcha = NewCaptchaClient(c.config)
	c.CategoryBanner = NewCategoryBannerClient(c.config)
	c.DataDictionaryKey = NewDataDictionaryKeyClient(c.config)
	c.DataDictionaryValue = NewDataDictionaryValueClient(c.config)
	c.Feedback = NewFeedbackClient(c.config)
	c.HomeBanner = NewHomeBannerClient(c.config)
	c.Message = NewMessageClient(c.config)
	c.MessageRead = NewMessageReadClient(c.config)
	c.Notification = NewNotificationClient(c.config)
	c.Order = NewOrderClient(c.config)
	c.OrderItem = NewOrderItemClient(c.config)
	c.PopularSearch = NewPopularSearchClient(c.config)
	c.Product = NewProductClient(c.config)
	c.ProductAttributeKey = NewProductAttributeKeyClient(c.config)
	c.ProductAttributeValue = NewProductAttributeValueClient(c.config)
	c.ProductBrowseHistory = NewProductBrowseHistoryClient(c.config)
	c.ProductCategory = NewProductCategoryClient(c.config)
	c.ProductCollection = NewProductCollectionClient(c.config)
	c.ProductEvaluation = NewProductEvaluationClient(c.config)
	c.ProductFocus = NewProductFocusClient(c.config)
	c.ProductSpecs = NewProductSpecsClient(c.config)
	c.ReceivingAddress = NewReceivingAddressClient(c.config)
	c.ShoppingCart = NewShoppingCartClient(c.config)
	c.SystemConfig = NewSystemConfigClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserIntegral = NewUserIntegralClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Aftermarket:           NewAftermarketClient(cfg),
		Annex:                 NewAnnexClient(cfg),
		Captcha:               NewCaptchaClient(cfg),
		CategoryBanner:        NewCategoryBannerClient(cfg),
		DataDictionaryKey:     NewDataDictionaryKeyClient(cfg),
		DataDictionaryValue:   NewDataDictionaryValueClient(cfg),
		Feedback:              NewFeedbackClient(cfg),
		HomeBanner:            NewHomeBannerClient(cfg),
		Message:               NewMessageClient(cfg),
		MessageRead:           NewMessageReadClient(cfg),
		Notification:          NewNotificationClient(cfg),
		Order:                 NewOrderClient(cfg),
		OrderItem:             NewOrderItemClient(cfg),
		PopularSearch:         NewPopularSearchClient(cfg),
		Product:               NewProductClient(cfg),
		ProductAttributeKey:   NewProductAttributeKeyClient(cfg),
		ProductAttributeValue: NewProductAttributeValueClient(cfg),
		ProductBrowseHistory:  NewProductBrowseHistoryClient(cfg),
		ProductCategory:       NewProductCategoryClient(cfg),
		ProductCollection:     NewProductCollectionClient(cfg),
		ProductEvaluation:     NewProductEvaluationClient(cfg),
		ProductFocus:          NewProductFocusClient(cfg),
		ProductSpecs:          NewProductSpecsClient(cfg),
		ReceivingAddress:      NewReceivingAddressClient(cfg),
		ShoppingCart:          NewShoppingCartClient(cfg),
		SystemConfig:          NewSystemConfigClient(cfg),
		User:                  NewUserClient(cfg),
		UserIntegral:          NewUserIntegralClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Aftermarket:           NewAftermarketClient(cfg),
		Annex:                 NewAnnexClient(cfg),
		Captcha:               NewCaptchaClient(cfg),
		CategoryBanner:        NewCategoryBannerClient(cfg),
		DataDictionaryKey:     NewDataDictionaryKeyClient(cfg),
		DataDictionaryValue:   NewDataDictionaryValueClient(cfg),
		Feedback:              NewFeedbackClient(cfg),
		HomeBanner:            NewHomeBannerClient(cfg),
		Message:               NewMessageClient(cfg),
		MessageRead:           NewMessageReadClient(cfg),
		Notification:          NewNotificationClient(cfg),
		Order:                 NewOrderClient(cfg),
		OrderItem:             NewOrderItemClient(cfg),
		PopularSearch:         NewPopularSearchClient(cfg),
		Product:               NewProductClient(cfg),
		ProductAttributeKey:   NewProductAttributeKeyClient(cfg),
		ProductAttributeValue: NewProductAttributeValueClient(cfg),
		ProductBrowseHistory:  NewProductBrowseHistoryClient(cfg),
		ProductCategory:       NewProductCategoryClient(cfg),
		ProductCollection:     NewProductCollectionClient(cfg),
		ProductEvaluation:     NewProductEvaluationClient(cfg),
		ProductFocus:          NewProductFocusClient(cfg),
		ProductSpecs:          NewProductSpecsClient(cfg),
		ReceivingAddress:      NewReceivingAddressClient(cfg),
		ShoppingCart:          NewShoppingCartClient(cfg),
		SystemConfig:          NewSystemConfigClient(cfg),
		User:                  NewUserClient(cfg),
		UserIntegral:          NewUserIntegralClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Aftermarket.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Aftermarket.Use(hooks...)
	c.Annex.Use(hooks...)
	c.Captcha.Use(hooks...)
	c.CategoryBanner.Use(hooks...)
	c.DataDictionaryKey.Use(hooks...)
	c.DataDictionaryValue.Use(hooks...)
	c.Feedback.Use(hooks...)
	c.HomeBanner.Use(hooks...)
	c.Message.Use(hooks...)
	c.MessageRead.Use(hooks...)
	c.Notification.Use(hooks...)
	c.Order.Use(hooks...)
	c.OrderItem.Use(hooks...)
	c.PopularSearch.Use(hooks...)
	c.Product.Use(hooks...)
	c.ProductAttributeKey.Use(hooks...)
	c.ProductAttributeValue.Use(hooks...)
	c.ProductBrowseHistory.Use(hooks...)
	c.ProductCategory.Use(hooks...)
	c.ProductCollection.Use(hooks...)
	c.ProductEvaluation.Use(hooks...)
	c.ProductFocus.Use(hooks...)
	c.ProductSpecs.Use(hooks...)
	c.ReceivingAddress.Use(hooks...)
	c.ShoppingCart.Use(hooks...)
	c.SystemConfig.Use(hooks...)
	c.User.Use(hooks...)
	c.UserIntegral.Use(hooks...)
}

// AftermarketClient is a client for the Aftermarket schema.
type AftermarketClient struct {
	config
}

// NewAftermarketClient returns a client for the Aftermarket from the given config.
func NewAftermarketClient(c config) *AftermarketClient {
	return &AftermarketClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `aftermarket.Hooks(f(g(h())))`.
func (c *AftermarketClient) Use(hooks ...Hook) {
	c.hooks.Aftermarket = append(c.hooks.Aftermarket, hooks...)
}

// Create returns a create builder for Aftermarket.
func (c *AftermarketClient) Create() *AftermarketCreate {
	mutation := newAftermarketMutation(c.config, OpCreate)
	return &AftermarketCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Aftermarket entities.
func (c *AftermarketClient) CreateBulk(builders ...*AftermarketCreate) *AftermarketCreateBulk {
	return &AftermarketCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Aftermarket.
func (c *AftermarketClient) Update() *AftermarketUpdate {
	mutation := newAftermarketMutation(c.config, OpUpdate)
	return &AftermarketUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AftermarketClient) UpdateOne(a *Aftermarket) *AftermarketUpdateOne {
	mutation := newAftermarketMutation(c.config, OpUpdateOne, withAftermarket(a))
	return &AftermarketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AftermarketClient) UpdateOneID(id int) *AftermarketUpdateOne {
	mutation := newAftermarketMutation(c.config, OpUpdateOne, withAftermarketID(id))
	return &AftermarketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Aftermarket.
func (c *AftermarketClient) Delete() *AftermarketDelete {
	mutation := newAftermarketMutation(c.config, OpDelete)
	return &AftermarketDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AftermarketClient) DeleteOne(a *Aftermarket) *AftermarketDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AftermarketClient) DeleteOneID(id int) *AftermarketDeleteOne {
	builder := c.Delete().Where(aftermarket.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AftermarketDeleteOne{builder}
}

// Query returns a query builder for Aftermarket.
func (c *AftermarketClient) Query() *AftermarketQuery {
	return &AftermarketQuery{
		config: c.config,
	}
}

// Get returns a Aftermarket entity by its id.
func (c *AftermarketClient) Get(ctx context.Context, id int) (*Aftermarket, error) {
	return c.Query().Where(aftermarket.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AftermarketClient) GetX(ctx context.Context, id int) *Aftermarket {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AftermarketClient) Hooks() []Hook {
	return c.hooks.Aftermarket
}

// AnnexClient is a client for the Annex schema.
type AnnexClient struct {
	config
}

// NewAnnexClient returns a client for the Annex from the given config.
func NewAnnexClient(c config) *AnnexClient {
	return &AnnexClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `annex.Hooks(f(g(h())))`.
func (c *AnnexClient) Use(hooks ...Hook) {
	c.hooks.Annex = append(c.hooks.Annex, hooks...)
}

// Create returns a create builder for Annex.
func (c *AnnexClient) Create() *AnnexCreate {
	mutation := newAnnexMutation(c.config, OpCreate)
	return &AnnexCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Annex entities.
func (c *AnnexClient) CreateBulk(builders ...*AnnexCreate) *AnnexCreateBulk {
	return &AnnexCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Annex.
func (c *AnnexClient) Update() *AnnexUpdate {
	mutation := newAnnexMutation(c.config, OpUpdate)
	return &AnnexUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AnnexClient) UpdateOne(a *Annex) *AnnexUpdateOne {
	mutation := newAnnexMutation(c.config, OpUpdateOne, withAnnex(a))
	return &AnnexUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AnnexClient) UpdateOneID(id int) *AnnexUpdateOne {
	mutation := newAnnexMutation(c.config, OpUpdateOne, withAnnexID(id))
	return &AnnexUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Annex.
func (c *AnnexClient) Delete() *AnnexDelete {
	mutation := newAnnexMutation(c.config, OpDelete)
	return &AnnexDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AnnexClient) DeleteOne(a *Annex) *AnnexDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AnnexClient) DeleteOneID(id int) *AnnexDeleteOne {
	builder := c.Delete().Where(annex.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AnnexDeleteOne{builder}
}

// Query returns a query builder for Annex.
func (c *AnnexClient) Query() *AnnexQuery {
	return &AnnexQuery{
		config: c.config,
	}
}

// Get returns a Annex entity by its id.
func (c *AnnexClient) Get(ctx context.Context, id int) (*Annex, error) {
	return c.Query().Where(annex.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AnnexClient) GetX(ctx context.Context, id int) *Annex {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AnnexClient) Hooks() []Hook {
	return c.hooks.Annex
}

// CaptchaClient is a client for the Captcha schema.
type CaptchaClient struct {
	config
}

// NewCaptchaClient returns a client for the Captcha from the given config.
func NewCaptchaClient(c config) *CaptchaClient {
	return &CaptchaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `captcha.Hooks(f(g(h())))`.
func (c *CaptchaClient) Use(hooks ...Hook) {
	c.hooks.Captcha = append(c.hooks.Captcha, hooks...)
}

// Create returns a create builder for Captcha.
func (c *CaptchaClient) Create() *CaptchaCreate {
	mutation := newCaptchaMutation(c.config, OpCreate)
	return &CaptchaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Captcha entities.
func (c *CaptchaClient) CreateBulk(builders ...*CaptchaCreate) *CaptchaCreateBulk {
	return &CaptchaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Captcha.
func (c *CaptchaClient) Update() *CaptchaUpdate {
	mutation := newCaptchaMutation(c.config, OpUpdate)
	return &CaptchaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CaptchaClient) UpdateOne(ca *Captcha) *CaptchaUpdateOne {
	mutation := newCaptchaMutation(c.config, OpUpdateOne, withCaptcha(ca))
	return &CaptchaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CaptchaClient) UpdateOneID(id int) *CaptchaUpdateOne {
	mutation := newCaptchaMutation(c.config, OpUpdateOne, withCaptchaID(id))
	return &CaptchaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Captcha.
func (c *CaptchaClient) Delete() *CaptchaDelete {
	mutation := newCaptchaMutation(c.config, OpDelete)
	return &CaptchaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CaptchaClient) DeleteOne(ca *Captcha) *CaptchaDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CaptchaClient) DeleteOneID(id int) *CaptchaDeleteOne {
	builder := c.Delete().Where(captcha.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CaptchaDeleteOne{builder}
}

// Query returns a query builder for Captcha.
func (c *CaptchaClient) Query() *CaptchaQuery {
	return &CaptchaQuery{
		config: c.config,
	}
}

// Get returns a Captcha entity by its id.
func (c *CaptchaClient) Get(ctx context.Context, id int) (*Captcha, error) {
	return c.Query().Where(captcha.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CaptchaClient) GetX(ctx context.Context, id int) *Captcha {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CaptchaClient) Hooks() []Hook {
	return c.hooks.Captcha
}

// CategoryBannerClient is a client for the CategoryBanner schema.
type CategoryBannerClient struct {
	config
}

// NewCategoryBannerClient returns a client for the CategoryBanner from the given config.
func NewCategoryBannerClient(c config) *CategoryBannerClient {
	return &CategoryBannerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `categorybanner.Hooks(f(g(h())))`.
func (c *CategoryBannerClient) Use(hooks ...Hook) {
	c.hooks.CategoryBanner = append(c.hooks.CategoryBanner, hooks...)
}

// Create returns a create builder for CategoryBanner.
func (c *CategoryBannerClient) Create() *CategoryBannerCreate {
	mutation := newCategoryBannerMutation(c.config, OpCreate)
	return &CategoryBannerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CategoryBanner entities.
func (c *CategoryBannerClient) CreateBulk(builders ...*CategoryBannerCreate) *CategoryBannerCreateBulk {
	return &CategoryBannerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CategoryBanner.
func (c *CategoryBannerClient) Update() *CategoryBannerUpdate {
	mutation := newCategoryBannerMutation(c.config, OpUpdate)
	return &CategoryBannerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoryBannerClient) UpdateOne(cb *CategoryBanner) *CategoryBannerUpdateOne {
	mutation := newCategoryBannerMutation(c.config, OpUpdateOne, withCategoryBanner(cb))
	return &CategoryBannerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoryBannerClient) UpdateOneID(id int) *CategoryBannerUpdateOne {
	mutation := newCategoryBannerMutation(c.config, OpUpdateOne, withCategoryBannerID(id))
	return &CategoryBannerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CategoryBanner.
func (c *CategoryBannerClient) Delete() *CategoryBannerDelete {
	mutation := newCategoryBannerMutation(c.config, OpDelete)
	return &CategoryBannerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CategoryBannerClient) DeleteOne(cb *CategoryBanner) *CategoryBannerDeleteOne {
	return c.DeleteOneID(cb.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CategoryBannerClient) DeleteOneID(id int) *CategoryBannerDeleteOne {
	builder := c.Delete().Where(categorybanner.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoryBannerDeleteOne{builder}
}

// Query returns a query builder for CategoryBanner.
func (c *CategoryBannerClient) Query() *CategoryBannerQuery {
	return &CategoryBannerQuery{
		config: c.config,
	}
}

// Get returns a CategoryBanner entity by its id.
func (c *CategoryBannerClient) Get(ctx context.Context, id int) (*CategoryBanner, error) {
	return c.Query().Where(categorybanner.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoryBannerClient) GetX(ctx context.Context, id int) *CategoryBanner {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CategoryBannerClient) Hooks() []Hook {
	return c.hooks.CategoryBanner
}

// DataDictionaryKeyClient is a client for the DataDictionaryKey schema.
type DataDictionaryKeyClient struct {
	config
}

// NewDataDictionaryKeyClient returns a client for the DataDictionaryKey from the given config.
func NewDataDictionaryKeyClient(c config) *DataDictionaryKeyClient {
	return &DataDictionaryKeyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `datadictionarykey.Hooks(f(g(h())))`.
func (c *DataDictionaryKeyClient) Use(hooks ...Hook) {
	c.hooks.DataDictionaryKey = append(c.hooks.DataDictionaryKey, hooks...)
}

// Create returns a create builder for DataDictionaryKey.
func (c *DataDictionaryKeyClient) Create() *DataDictionaryKeyCreate {
	mutation := newDataDictionaryKeyMutation(c.config, OpCreate)
	return &DataDictionaryKeyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DataDictionaryKey entities.
func (c *DataDictionaryKeyClient) CreateBulk(builders ...*DataDictionaryKeyCreate) *DataDictionaryKeyCreateBulk {
	return &DataDictionaryKeyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DataDictionaryKey.
func (c *DataDictionaryKeyClient) Update() *DataDictionaryKeyUpdate {
	mutation := newDataDictionaryKeyMutation(c.config, OpUpdate)
	return &DataDictionaryKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DataDictionaryKeyClient) UpdateOne(ddk *DataDictionaryKey) *DataDictionaryKeyUpdateOne {
	mutation := newDataDictionaryKeyMutation(c.config, OpUpdateOne, withDataDictionaryKey(ddk))
	return &DataDictionaryKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DataDictionaryKeyClient) UpdateOneID(id int) *DataDictionaryKeyUpdateOne {
	mutation := newDataDictionaryKeyMutation(c.config, OpUpdateOne, withDataDictionaryKeyID(id))
	return &DataDictionaryKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DataDictionaryKey.
func (c *DataDictionaryKeyClient) Delete() *DataDictionaryKeyDelete {
	mutation := newDataDictionaryKeyMutation(c.config, OpDelete)
	return &DataDictionaryKeyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DataDictionaryKeyClient) DeleteOne(ddk *DataDictionaryKey) *DataDictionaryKeyDeleteOne {
	return c.DeleteOneID(ddk.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DataDictionaryKeyClient) DeleteOneID(id int) *DataDictionaryKeyDeleteOne {
	builder := c.Delete().Where(datadictionarykey.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DataDictionaryKeyDeleteOne{builder}
}

// Query returns a query builder for DataDictionaryKey.
func (c *DataDictionaryKeyClient) Query() *DataDictionaryKeyQuery {
	return &DataDictionaryKeyQuery{
		config: c.config,
	}
}

// Get returns a DataDictionaryKey entity by its id.
func (c *DataDictionaryKeyClient) Get(ctx context.Context, id int) (*DataDictionaryKey, error) {
	return c.Query().Where(datadictionarykey.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DataDictionaryKeyClient) GetX(ctx context.Context, id int) *DataDictionaryKey {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DataDictionaryKeyClient) Hooks() []Hook {
	return c.hooks.DataDictionaryKey
}

// DataDictionaryValueClient is a client for the DataDictionaryValue schema.
type DataDictionaryValueClient struct {
	config
}

// NewDataDictionaryValueClient returns a client for the DataDictionaryValue from the given config.
func NewDataDictionaryValueClient(c config) *DataDictionaryValueClient {
	return &DataDictionaryValueClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `datadictionaryvalue.Hooks(f(g(h())))`.
func (c *DataDictionaryValueClient) Use(hooks ...Hook) {
	c.hooks.DataDictionaryValue = append(c.hooks.DataDictionaryValue, hooks...)
}

// Create returns a create builder for DataDictionaryValue.
func (c *DataDictionaryValueClient) Create() *DataDictionaryValueCreate {
	mutation := newDataDictionaryValueMutation(c.config, OpCreate)
	return &DataDictionaryValueCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DataDictionaryValue entities.
func (c *DataDictionaryValueClient) CreateBulk(builders ...*DataDictionaryValueCreate) *DataDictionaryValueCreateBulk {
	return &DataDictionaryValueCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DataDictionaryValue.
func (c *DataDictionaryValueClient) Update() *DataDictionaryValueUpdate {
	mutation := newDataDictionaryValueMutation(c.config, OpUpdate)
	return &DataDictionaryValueUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DataDictionaryValueClient) UpdateOne(ddv *DataDictionaryValue) *DataDictionaryValueUpdateOne {
	mutation := newDataDictionaryValueMutation(c.config, OpUpdateOne, withDataDictionaryValue(ddv))
	return &DataDictionaryValueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DataDictionaryValueClient) UpdateOneID(id int) *DataDictionaryValueUpdateOne {
	mutation := newDataDictionaryValueMutation(c.config, OpUpdateOne, withDataDictionaryValueID(id))
	return &DataDictionaryValueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DataDictionaryValue.
func (c *DataDictionaryValueClient) Delete() *DataDictionaryValueDelete {
	mutation := newDataDictionaryValueMutation(c.config, OpDelete)
	return &DataDictionaryValueDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DataDictionaryValueClient) DeleteOne(ddv *DataDictionaryValue) *DataDictionaryValueDeleteOne {
	return c.DeleteOneID(ddv.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DataDictionaryValueClient) DeleteOneID(id int) *DataDictionaryValueDeleteOne {
	builder := c.Delete().Where(datadictionaryvalue.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DataDictionaryValueDeleteOne{builder}
}

// Query returns a query builder for DataDictionaryValue.
func (c *DataDictionaryValueClient) Query() *DataDictionaryValueQuery {
	return &DataDictionaryValueQuery{
		config: c.config,
	}
}

// Get returns a DataDictionaryValue entity by its id.
func (c *DataDictionaryValueClient) Get(ctx context.Context, id int) (*DataDictionaryValue, error) {
	return c.Query().Where(datadictionaryvalue.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DataDictionaryValueClient) GetX(ctx context.Context, id int) *DataDictionaryValue {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DataDictionaryValueClient) Hooks() []Hook {
	return c.hooks.DataDictionaryValue
}

// FeedbackClient is a client for the Feedback schema.
type FeedbackClient struct {
	config
}

// NewFeedbackClient returns a client for the Feedback from the given config.
func NewFeedbackClient(c config) *FeedbackClient {
	return &FeedbackClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feedback.Hooks(f(g(h())))`.
func (c *FeedbackClient) Use(hooks ...Hook) {
	c.hooks.Feedback = append(c.hooks.Feedback, hooks...)
}

// Create returns a create builder for Feedback.
func (c *FeedbackClient) Create() *FeedbackCreate {
	mutation := newFeedbackMutation(c.config, OpCreate)
	return &FeedbackCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Feedback entities.
func (c *FeedbackClient) CreateBulk(builders ...*FeedbackCreate) *FeedbackCreateBulk {
	return &FeedbackCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Feedback.
func (c *FeedbackClient) Update() *FeedbackUpdate {
	mutation := newFeedbackMutation(c.config, OpUpdate)
	return &FeedbackUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedbackClient) UpdateOne(f *Feedback) *FeedbackUpdateOne {
	mutation := newFeedbackMutation(c.config, OpUpdateOne, withFeedback(f))
	return &FeedbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedbackClient) UpdateOneID(id int) *FeedbackUpdateOne {
	mutation := newFeedbackMutation(c.config, OpUpdateOne, withFeedbackID(id))
	return &FeedbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Feedback.
func (c *FeedbackClient) Delete() *FeedbackDelete {
	mutation := newFeedbackMutation(c.config, OpDelete)
	return &FeedbackDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FeedbackClient) DeleteOne(f *Feedback) *FeedbackDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FeedbackClient) DeleteOneID(id int) *FeedbackDeleteOne {
	builder := c.Delete().Where(feedback.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedbackDeleteOne{builder}
}

// Query returns a query builder for Feedback.
func (c *FeedbackClient) Query() *FeedbackQuery {
	return &FeedbackQuery{
		config: c.config,
	}
}

// Get returns a Feedback entity by its id.
func (c *FeedbackClient) Get(ctx context.Context, id int) (*Feedback, error) {
	return c.Query().Where(feedback.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedbackClient) GetX(ctx context.Context, id int) *Feedback {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FeedbackClient) Hooks() []Hook {
	return c.hooks.Feedback
}

// HomeBannerClient is a client for the HomeBanner schema.
type HomeBannerClient struct {
	config
}

// NewHomeBannerClient returns a client for the HomeBanner from the given config.
func NewHomeBannerClient(c config) *HomeBannerClient {
	return &HomeBannerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `homebanner.Hooks(f(g(h())))`.
func (c *HomeBannerClient) Use(hooks ...Hook) {
	c.hooks.HomeBanner = append(c.hooks.HomeBanner, hooks...)
}

// Create returns a create builder for HomeBanner.
func (c *HomeBannerClient) Create() *HomeBannerCreate {
	mutation := newHomeBannerMutation(c.config, OpCreate)
	return &HomeBannerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HomeBanner entities.
func (c *HomeBannerClient) CreateBulk(builders ...*HomeBannerCreate) *HomeBannerCreateBulk {
	return &HomeBannerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HomeBanner.
func (c *HomeBannerClient) Update() *HomeBannerUpdate {
	mutation := newHomeBannerMutation(c.config, OpUpdate)
	return &HomeBannerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HomeBannerClient) UpdateOne(hb *HomeBanner) *HomeBannerUpdateOne {
	mutation := newHomeBannerMutation(c.config, OpUpdateOne, withHomeBanner(hb))
	return &HomeBannerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HomeBannerClient) UpdateOneID(id int) *HomeBannerUpdateOne {
	mutation := newHomeBannerMutation(c.config, OpUpdateOne, withHomeBannerID(id))
	return &HomeBannerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HomeBanner.
func (c *HomeBannerClient) Delete() *HomeBannerDelete {
	mutation := newHomeBannerMutation(c.config, OpDelete)
	return &HomeBannerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *HomeBannerClient) DeleteOne(hb *HomeBanner) *HomeBannerDeleteOne {
	return c.DeleteOneID(hb.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *HomeBannerClient) DeleteOneID(id int) *HomeBannerDeleteOne {
	builder := c.Delete().Where(homebanner.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HomeBannerDeleteOne{builder}
}

// Query returns a query builder for HomeBanner.
func (c *HomeBannerClient) Query() *HomeBannerQuery {
	return &HomeBannerQuery{
		config: c.config,
	}
}

// Get returns a HomeBanner entity by its id.
func (c *HomeBannerClient) Get(ctx context.Context, id int) (*HomeBanner, error) {
	return c.Query().Where(homebanner.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HomeBannerClient) GetX(ctx context.Context, id int) *HomeBanner {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *HomeBannerClient) Hooks() []Hook {
	return c.hooks.HomeBanner
}

// MessageClient is a client for the Message schema.
type MessageClient struct {
	config
}

// NewMessageClient returns a client for the Message from the given config.
func NewMessageClient(c config) *MessageClient {
	return &MessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `message.Hooks(f(g(h())))`.
func (c *MessageClient) Use(hooks ...Hook) {
	c.hooks.Message = append(c.hooks.Message, hooks...)
}

// Create returns a create builder for Message.
func (c *MessageClient) Create() *MessageCreate {
	mutation := newMessageMutation(c.config, OpCreate)
	return &MessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Message entities.
func (c *MessageClient) CreateBulk(builders ...*MessageCreate) *MessageCreateBulk {
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Message.
func (c *MessageClient) Update() *MessageUpdate {
	mutation := newMessageMutation(c.config, OpUpdate)
	return &MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageClient) UpdateOne(m *Message) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessage(m))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageClient) UpdateOneID(id int) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessageID(id))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Message.
func (c *MessageClient) Delete() *MessageDelete {
	mutation := newMessageMutation(c.config, OpDelete)
	return &MessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MessageClient) DeleteOne(m *Message) *MessageDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MessageClient) DeleteOneID(id int) *MessageDeleteOne {
	builder := c.Delete().Where(message.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageDeleteOne{builder}
}

// Query returns a query builder for Message.
func (c *MessageClient) Query() *MessageQuery {
	return &MessageQuery{
		config: c.config,
	}
}

// Get returns a Message entity by its id.
func (c *MessageClient) Get(ctx context.Context, id int) (*Message, error) {
	return c.Query().Where(message.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageClient) GetX(ctx context.Context, id int) *Message {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MessageClient) Hooks() []Hook {
	return c.hooks.Message
}

// MessageReadClient is a client for the MessageRead schema.
type MessageReadClient struct {
	config
}

// NewMessageReadClient returns a client for the MessageRead from the given config.
func NewMessageReadClient(c config) *MessageReadClient {
	return &MessageReadClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `messageread.Hooks(f(g(h())))`.
func (c *MessageReadClient) Use(hooks ...Hook) {
	c.hooks.MessageRead = append(c.hooks.MessageRead, hooks...)
}

// Create returns a create builder for MessageRead.
func (c *MessageReadClient) Create() *MessageReadCreate {
	mutation := newMessageReadMutation(c.config, OpCreate)
	return &MessageReadCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MessageRead entities.
func (c *MessageReadClient) CreateBulk(builders ...*MessageReadCreate) *MessageReadCreateBulk {
	return &MessageReadCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MessageRead.
func (c *MessageReadClient) Update() *MessageReadUpdate {
	mutation := newMessageReadMutation(c.config, OpUpdate)
	return &MessageReadUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageReadClient) UpdateOne(mr *MessageRead) *MessageReadUpdateOne {
	mutation := newMessageReadMutation(c.config, OpUpdateOne, withMessageRead(mr))
	return &MessageReadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageReadClient) UpdateOneID(id int) *MessageReadUpdateOne {
	mutation := newMessageReadMutation(c.config, OpUpdateOne, withMessageReadID(id))
	return &MessageReadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MessageRead.
func (c *MessageReadClient) Delete() *MessageReadDelete {
	mutation := newMessageReadMutation(c.config, OpDelete)
	return &MessageReadDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MessageReadClient) DeleteOne(mr *MessageRead) *MessageReadDeleteOne {
	return c.DeleteOneID(mr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MessageReadClient) DeleteOneID(id int) *MessageReadDeleteOne {
	builder := c.Delete().Where(messageread.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageReadDeleteOne{builder}
}

// Query returns a query builder for MessageRead.
func (c *MessageReadClient) Query() *MessageReadQuery {
	return &MessageReadQuery{
		config: c.config,
	}
}

// Get returns a MessageRead entity by its id.
func (c *MessageReadClient) Get(ctx context.Context, id int) (*MessageRead, error) {
	return c.Query().Where(messageread.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageReadClient) GetX(ctx context.Context, id int) *MessageRead {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MessageReadClient) Hooks() []Hook {
	return c.hooks.MessageRead
}

// NotificationClient is a client for the Notification schema.
type NotificationClient struct {
	config
}

// NewNotificationClient returns a client for the Notification from the given config.
func NewNotificationClient(c config) *NotificationClient {
	return &NotificationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notification.Hooks(f(g(h())))`.
func (c *NotificationClient) Use(hooks ...Hook) {
	c.hooks.Notification = append(c.hooks.Notification, hooks...)
}

// Create returns a create builder for Notification.
func (c *NotificationClient) Create() *NotificationCreate {
	mutation := newNotificationMutation(c.config, OpCreate)
	return &NotificationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Notification entities.
func (c *NotificationClient) CreateBulk(builders ...*NotificationCreate) *NotificationCreateBulk {
	return &NotificationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Notification.
func (c *NotificationClient) Update() *NotificationUpdate {
	mutation := newNotificationMutation(c.config, OpUpdate)
	return &NotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationClient) UpdateOne(n *Notification) *NotificationUpdateOne {
	mutation := newNotificationMutation(c.config, OpUpdateOne, withNotification(n))
	return &NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationClient) UpdateOneID(id int) *NotificationUpdateOne {
	mutation := newNotificationMutation(c.config, OpUpdateOne, withNotificationID(id))
	return &NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Notification.
func (c *NotificationClient) Delete() *NotificationDelete {
	mutation := newNotificationMutation(c.config, OpDelete)
	return &NotificationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NotificationClient) DeleteOne(n *Notification) *NotificationDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NotificationClient) DeleteOneID(id int) *NotificationDeleteOne {
	builder := c.Delete().Where(notification.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationDeleteOne{builder}
}

// Query returns a query builder for Notification.
func (c *NotificationClient) Query() *NotificationQuery {
	return &NotificationQuery{
		config: c.config,
	}
}

// Get returns a Notification entity by its id.
func (c *NotificationClient) Get(ctx context.Context, id int) (*Notification, error) {
	return c.Query().Where(notification.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationClient) GetX(ctx context.Context, id int) *Notification {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NotificationClient) Hooks() []Hook {
	return c.hooks.Notification
}

// OrderClient is a client for the Order schema.
type OrderClient struct {
	config
}

// NewOrderClient returns a client for the Order from the given config.
func NewOrderClient(c config) *OrderClient {
	return &OrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `order.Hooks(f(g(h())))`.
func (c *OrderClient) Use(hooks ...Hook) {
	c.hooks.Order = append(c.hooks.Order, hooks...)
}

// Create returns a create builder for Order.
func (c *OrderClient) Create() *OrderCreate {
	mutation := newOrderMutation(c.config, OpCreate)
	return &OrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Order entities.
func (c *OrderClient) CreateBulk(builders ...*OrderCreate) *OrderCreateBulk {
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Order.
func (c *OrderClient) Update() *OrderUpdate {
	mutation := newOrderMutation(c.config, OpUpdate)
	return &OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderClient) UpdateOne(o *Order) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(o))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderClient) UpdateOneID(id int) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrderID(id))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Order.
func (c *OrderClient) Delete() *OrderDelete {
	mutation := newOrderMutation(c.config, OpDelete)
	return &OrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderClient) DeleteOne(o *Order) *OrderDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderClient) DeleteOneID(id int) *OrderDeleteOne {
	builder := c.Delete().Where(order.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderDeleteOne{builder}
}

// Query returns a query builder for Order.
func (c *OrderClient) Query() *OrderQuery {
	return &OrderQuery{
		config: c.config,
	}
}

// Get returns a Order entity by its id.
func (c *OrderClient) Get(ctx context.Context, id int) (*Order, error) {
	return c.Query().Where(order.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderClient) GetX(ctx context.Context, id int) *Order {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderClient) Hooks() []Hook {
	return c.hooks.Order
}

// OrderItemClient is a client for the OrderItem schema.
type OrderItemClient struct {
	config
}

// NewOrderItemClient returns a client for the OrderItem from the given config.
func NewOrderItemClient(c config) *OrderItemClient {
	return &OrderItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderitem.Hooks(f(g(h())))`.
func (c *OrderItemClient) Use(hooks ...Hook) {
	c.hooks.OrderItem = append(c.hooks.OrderItem, hooks...)
}

// Create returns a create builder for OrderItem.
func (c *OrderItemClient) Create() *OrderItemCreate {
	mutation := newOrderItemMutation(c.config, OpCreate)
	return &OrderItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderItem entities.
func (c *OrderItemClient) CreateBulk(builders ...*OrderItemCreate) *OrderItemCreateBulk {
	return &OrderItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderItem.
func (c *OrderItemClient) Update() *OrderItemUpdate {
	mutation := newOrderItemMutation(c.config, OpUpdate)
	return &OrderItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderItemClient) UpdateOne(oi *OrderItem) *OrderItemUpdateOne {
	mutation := newOrderItemMutation(c.config, OpUpdateOne, withOrderItem(oi))
	return &OrderItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderItemClient) UpdateOneID(id int) *OrderItemUpdateOne {
	mutation := newOrderItemMutation(c.config, OpUpdateOne, withOrderItemID(id))
	return &OrderItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderItem.
func (c *OrderItemClient) Delete() *OrderItemDelete {
	mutation := newOrderItemMutation(c.config, OpDelete)
	return &OrderItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderItemClient) DeleteOne(oi *OrderItem) *OrderItemDeleteOne {
	return c.DeleteOneID(oi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderItemClient) DeleteOneID(id int) *OrderItemDeleteOne {
	builder := c.Delete().Where(orderitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderItemDeleteOne{builder}
}

// Query returns a query builder for OrderItem.
func (c *OrderItemClient) Query() *OrderItemQuery {
	return &OrderItemQuery{
		config: c.config,
	}
}

// Get returns a OrderItem entity by its id.
func (c *OrderItemClient) Get(ctx context.Context, id int) (*OrderItem, error) {
	return c.Query().Where(orderitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderItemClient) GetX(ctx context.Context, id int) *OrderItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderItemClient) Hooks() []Hook {
	return c.hooks.OrderItem
}

// PopularSearchClient is a client for the PopularSearch schema.
type PopularSearchClient struct {
	config
}

// NewPopularSearchClient returns a client for the PopularSearch from the given config.
func NewPopularSearchClient(c config) *PopularSearchClient {
	return &PopularSearchClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `popularsearch.Hooks(f(g(h())))`.
func (c *PopularSearchClient) Use(hooks ...Hook) {
	c.hooks.PopularSearch = append(c.hooks.PopularSearch, hooks...)
}

// Create returns a create builder for PopularSearch.
func (c *PopularSearchClient) Create() *PopularSearchCreate {
	mutation := newPopularSearchMutation(c.config, OpCreate)
	return &PopularSearchCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PopularSearch entities.
func (c *PopularSearchClient) CreateBulk(builders ...*PopularSearchCreate) *PopularSearchCreateBulk {
	return &PopularSearchCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PopularSearch.
func (c *PopularSearchClient) Update() *PopularSearchUpdate {
	mutation := newPopularSearchMutation(c.config, OpUpdate)
	return &PopularSearchUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PopularSearchClient) UpdateOne(ps *PopularSearch) *PopularSearchUpdateOne {
	mutation := newPopularSearchMutation(c.config, OpUpdateOne, withPopularSearch(ps))
	return &PopularSearchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PopularSearchClient) UpdateOneID(id int) *PopularSearchUpdateOne {
	mutation := newPopularSearchMutation(c.config, OpUpdateOne, withPopularSearchID(id))
	return &PopularSearchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PopularSearch.
func (c *PopularSearchClient) Delete() *PopularSearchDelete {
	mutation := newPopularSearchMutation(c.config, OpDelete)
	return &PopularSearchDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PopularSearchClient) DeleteOne(ps *PopularSearch) *PopularSearchDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PopularSearchClient) DeleteOneID(id int) *PopularSearchDeleteOne {
	builder := c.Delete().Where(popularsearch.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PopularSearchDeleteOne{builder}
}

// Query returns a query builder for PopularSearch.
func (c *PopularSearchClient) Query() *PopularSearchQuery {
	return &PopularSearchQuery{
		config: c.config,
	}
}

// Get returns a PopularSearch entity by its id.
func (c *PopularSearchClient) Get(ctx context.Context, id int) (*PopularSearch, error) {
	return c.Query().Where(popularsearch.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PopularSearchClient) GetX(ctx context.Context, id int) *PopularSearch {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PopularSearchClient) Hooks() []Hook {
	return c.hooks.PopularSearch
}

// ProductClient is a client for the Product schema.
type ProductClient struct {
	config
}

// NewProductClient returns a client for the Product from the given config.
func NewProductClient(c config) *ProductClient {
	return &ProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `product.Hooks(f(g(h())))`.
func (c *ProductClient) Use(hooks ...Hook) {
	c.hooks.Product = append(c.hooks.Product, hooks...)
}

// Create returns a create builder for Product.
func (c *ProductClient) Create() *ProductCreate {
	mutation := newProductMutation(c.config, OpCreate)
	return &ProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Product entities.
func (c *ProductClient) CreateBulk(builders ...*ProductCreate) *ProductCreateBulk {
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Product.
func (c *ProductClient) Update() *ProductUpdate {
	mutation := newProductMutation(c.config, OpUpdate)
	return &ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductClient) UpdateOne(pr *Product) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProduct(pr))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductClient) UpdateOneID(id int) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProductID(id))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Product.
func (c *ProductClient) Delete() *ProductDelete {
	mutation := newProductMutation(c.config, OpDelete)
	return &ProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductClient) DeleteOne(pr *Product) *ProductDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductClient) DeleteOneID(id int) *ProductDeleteOne {
	builder := c.Delete().Where(product.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductDeleteOne{builder}
}

// Query returns a query builder for Product.
func (c *ProductClient) Query() *ProductQuery {
	return &ProductQuery{
		config: c.config,
	}
}

// Get returns a Product entity by its id.
func (c *ProductClient) Get(ctx context.Context, id int) (*Product, error) {
	return c.Query().Where(product.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductClient) GetX(ctx context.Context, id int) *Product {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductClient) Hooks() []Hook {
	return c.hooks.Product
}

// ProductAttributeKeyClient is a client for the ProductAttributeKey schema.
type ProductAttributeKeyClient struct {
	config
}

// NewProductAttributeKeyClient returns a client for the ProductAttributeKey from the given config.
func NewProductAttributeKeyClient(c config) *ProductAttributeKeyClient {
	return &ProductAttributeKeyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productattributekey.Hooks(f(g(h())))`.
func (c *ProductAttributeKeyClient) Use(hooks ...Hook) {
	c.hooks.ProductAttributeKey = append(c.hooks.ProductAttributeKey, hooks...)
}

// Create returns a create builder for ProductAttributeKey.
func (c *ProductAttributeKeyClient) Create() *ProductAttributeKeyCreate {
	mutation := newProductAttributeKeyMutation(c.config, OpCreate)
	return &ProductAttributeKeyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductAttributeKey entities.
func (c *ProductAttributeKeyClient) CreateBulk(builders ...*ProductAttributeKeyCreate) *ProductAttributeKeyCreateBulk {
	return &ProductAttributeKeyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductAttributeKey.
func (c *ProductAttributeKeyClient) Update() *ProductAttributeKeyUpdate {
	mutation := newProductAttributeKeyMutation(c.config, OpUpdate)
	return &ProductAttributeKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductAttributeKeyClient) UpdateOne(pak *ProductAttributeKey) *ProductAttributeKeyUpdateOne {
	mutation := newProductAttributeKeyMutation(c.config, OpUpdateOne, withProductAttributeKey(pak))
	return &ProductAttributeKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductAttributeKeyClient) UpdateOneID(id int) *ProductAttributeKeyUpdateOne {
	mutation := newProductAttributeKeyMutation(c.config, OpUpdateOne, withProductAttributeKeyID(id))
	return &ProductAttributeKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductAttributeKey.
func (c *ProductAttributeKeyClient) Delete() *ProductAttributeKeyDelete {
	mutation := newProductAttributeKeyMutation(c.config, OpDelete)
	return &ProductAttributeKeyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductAttributeKeyClient) DeleteOne(pak *ProductAttributeKey) *ProductAttributeKeyDeleteOne {
	return c.DeleteOneID(pak.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductAttributeKeyClient) DeleteOneID(id int) *ProductAttributeKeyDeleteOne {
	builder := c.Delete().Where(productattributekey.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductAttributeKeyDeleteOne{builder}
}

// Query returns a query builder for ProductAttributeKey.
func (c *ProductAttributeKeyClient) Query() *ProductAttributeKeyQuery {
	return &ProductAttributeKeyQuery{
		config: c.config,
	}
}

// Get returns a ProductAttributeKey entity by its id.
func (c *ProductAttributeKeyClient) Get(ctx context.Context, id int) (*ProductAttributeKey, error) {
	return c.Query().Where(productattributekey.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductAttributeKeyClient) GetX(ctx context.Context, id int) *ProductAttributeKey {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductAttributeKeyClient) Hooks() []Hook {
	return c.hooks.ProductAttributeKey
}

// ProductAttributeValueClient is a client for the ProductAttributeValue schema.
type ProductAttributeValueClient struct {
	config
}

// NewProductAttributeValueClient returns a client for the ProductAttributeValue from the given config.
func NewProductAttributeValueClient(c config) *ProductAttributeValueClient {
	return &ProductAttributeValueClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productattributevalue.Hooks(f(g(h())))`.
func (c *ProductAttributeValueClient) Use(hooks ...Hook) {
	c.hooks.ProductAttributeValue = append(c.hooks.ProductAttributeValue, hooks...)
}

// Create returns a create builder for ProductAttributeValue.
func (c *ProductAttributeValueClient) Create() *ProductAttributeValueCreate {
	mutation := newProductAttributeValueMutation(c.config, OpCreate)
	return &ProductAttributeValueCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductAttributeValue entities.
func (c *ProductAttributeValueClient) CreateBulk(builders ...*ProductAttributeValueCreate) *ProductAttributeValueCreateBulk {
	return &ProductAttributeValueCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductAttributeValue.
func (c *ProductAttributeValueClient) Update() *ProductAttributeValueUpdate {
	mutation := newProductAttributeValueMutation(c.config, OpUpdate)
	return &ProductAttributeValueUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductAttributeValueClient) UpdateOne(pav *ProductAttributeValue) *ProductAttributeValueUpdateOne {
	mutation := newProductAttributeValueMutation(c.config, OpUpdateOne, withProductAttributeValue(pav))
	return &ProductAttributeValueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductAttributeValueClient) UpdateOneID(id int) *ProductAttributeValueUpdateOne {
	mutation := newProductAttributeValueMutation(c.config, OpUpdateOne, withProductAttributeValueID(id))
	return &ProductAttributeValueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductAttributeValue.
func (c *ProductAttributeValueClient) Delete() *ProductAttributeValueDelete {
	mutation := newProductAttributeValueMutation(c.config, OpDelete)
	return &ProductAttributeValueDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductAttributeValueClient) DeleteOne(pav *ProductAttributeValue) *ProductAttributeValueDeleteOne {
	return c.DeleteOneID(pav.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductAttributeValueClient) DeleteOneID(id int) *ProductAttributeValueDeleteOne {
	builder := c.Delete().Where(productattributevalue.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductAttributeValueDeleteOne{builder}
}

// Query returns a query builder for ProductAttributeValue.
func (c *ProductAttributeValueClient) Query() *ProductAttributeValueQuery {
	return &ProductAttributeValueQuery{
		config: c.config,
	}
}

// Get returns a ProductAttributeValue entity by its id.
func (c *ProductAttributeValueClient) Get(ctx context.Context, id int) (*ProductAttributeValue, error) {
	return c.Query().Where(productattributevalue.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductAttributeValueClient) GetX(ctx context.Context, id int) *ProductAttributeValue {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductAttributeValueClient) Hooks() []Hook {
	return c.hooks.ProductAttributeValue
}

// ProductBrowseHistoryClient is a client for the ProductBrowseHistory schema.
type ProductBrowseHistoryClient struct {
	config
}

// NewProductBrowseHistoryClient returns a client for the ProductBrowseHistory from the given config.
func NewProductBrowseHistoryClient(c config) *ProductBrowseHistoryClient {
	return &ProductBrowseHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productbrowsehistory.Hooks(f(g(h())))`.
func (c *ProductBrowseHistoryClient) Use(hooks ...Hook) {
	c.hooks.ProductBrowseHistory = append(c.hooks.ProductBrowseHistory, hooks...)
}

// Create returns a create builder for ProductBrowseHistory.
func (c *ProductBrowseHistoryClient) Create() *ProductBrowseHistoryCreate {
	mutation := newProductBrowseHistoryMutation(c.config, OpCreate)
	return &ProductBrowseHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductBrowseHistory entities.
func (c *ProductBrowseHistoryClient) CreateBulk(builders ...*ProductBrowseHistoryCreate) *ProductBrowseHistoryCreateBulk {
	return &ProductBrowseHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductBrowseHistory.
func (c *ProductBrowseHistoryClient) Update() *ProductBrowseHistoryUpdate {
	mutation := newProductBrowseHistoryMutation(c.config, OpUpdate)
	return &ProductBrowseHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductBrowseHistoryClient) UpdateOne(pbh *ProductBrowseHistory) *ProductBrowseHistoryUpdateOne {
	mutation := newProductBrowseHistoryMutation(c.config, OpUpdateOne, withProductBrowseHistory(pbh))
	return &ProductBrowseHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductBrowseHistoryClient) UpdateOneID(id int) *ProductBrowseHistoryUpdateOne {
	mutation := newProductBrowseHistoryMutation(c.config, OpUpdateOne, withProductBrowseHistoryID(id))
	return &ProductBrowseHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductBrowseHistory.
func (c *ProductBrowseHistoryClient) Delete() *ProductBrowseHistoryDelete {
	mutation := newProductBrowseHistoryMutation(c.config, OpDelete)
	return &ProductBrowseHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductBrowseHistoryClient) DeleteOne(pbh *ProductBrowseHistory) *ProductBrowseHistoryDeleteOne {
	return c.DeleteOneID(pbh.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductBrowseHistoryClient) DeleteOneID(id int) *ProductBrowseHistoryDeleteOne {
	builder := c.Delete().Where(productbrowsehistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductBrowseHistoryDeleteOne{builder}
}

// Query returns a query builder for ProductBrowseHistory.
func (c *ProductBrowseHistoryClient) Query() *ProductBrowseHistoryQuery {
	return &ProductBrowseHistoryQuery{
		config: c.config,
	}
}

// Get returns a ProductBrowseHistory entity by its id.
func (c *ProductBrowseHistoryClient) Get(ctx context.Context, id int) (*ProductBrowseHistory, error) {
	return c.Query().Where(productbrowsehistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductBrowseHistoryClient) GetX(ctx context.Context, id int) *ProductBrowseHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductBrowseHistoryClient) Hooks() []Hook {
	return c.hooks.ProductBrowseHistory
}

// ProductCategoryClient is a client for the ProductCategory schema.
type ProductCategoryClient struct {
	config
}

// NewProductCategoryClient returns a client for the ProductCategory from the given config.
func NewProductCategoryClient(c config) *ProductCategoryClient {
	return &ProductCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productcategory.Hooks(f(g(h())))`.
func (c *ProductCategoryClient) Use(hooks ...Hook) {
	c.hooks.ProductCategory = append(c.hooks.ProductCategory, hooks...)
}

// Create returns a create builder for ProductCategory.
func (c *ProductCategoryClient) Create() *ProductCategoryCreate {
	mutation := newProductCategoryMutation(c.config, OpCreate)
	return &ProductCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductCategory entities.
func (c *ProductCategoryClient) CreateBulk(builders ...*ProductCategoryCreate) *ProductCategoryCreateBulk {
	return &ProductCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductCategory.
func (c *ProductCategoryClient) Update() *ProductCategoryUpdate {
	mutation := newProductCategoryMutation(c.config, OpUpdate)
	return &ProductCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductCategoryClient) UpdateOne(pc *ProductCategory) *ProductCategoryUpdateOne {
	mutation := newProductCategoryMutation(c.config, OpUpdateOne, withProductCategory(pc))
	return &ProductCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductCategoryClient) UpdateOneID(id int) *ProductCategoryUpdateOne {
	mutation := newProductCategoryMutation(c.config, OpUpdateOne, withProductCategoryID(id))
	return &ProductCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductCategory.
func (c *ProductCategoryClient) Delete() *ProductCategoryDelete {
	mutation := newProductCategoryMutation(c.config, OpDelete)
	return &ProductCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductCategoryClient) DeleteOne(pc *ProductCategory) *ProductCategoryDeleteOne {
	return c.DeleteOneID(pc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductCategoryClient) DeleteOneID(id int) *ProductCategoryDeleteOne {
	builder := c.Delete().Where(productcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductCategoryDeleteOne{builder}
}

// Query returns a query builder for ProductCategory.
func (c *ProductCategoryClient) Query() *ProductCategoryQuery {
	return &ProductCategoryQuery{
		config: c.config,
	}
}

// Get returns a ProductCategory entity by its id.
func (c *ProductCategoryClient) Get(ctx context.Context, id int) (*ProductCategory, error) {
	return c.Query().Where(productcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductCategoryClient) GetX(ctx context.Context, id int) *ProductCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductCategoryClient) Hooks() []Hook {
	return c.hooks.ProductCategory
}

// ProductCollectionClient is a client for the ProductCollection schema.
type ProductCollectionClient struct {
	config
}

// NewProductCollectionClient returns a client for the ProductCollection from the given config.
func NewProductCollectionClient(c config) *ProductCollectionClient {
	return &ProductCollectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productcollection.Hooks(f(g(h())))`.
func (c *ProductCollectionClient) Use(hooks ...Hook) {
	c.hooks.ProductCollection = append(c.hooks.ProductCollection, hooks...)
}

// Create returns a create builder for ProductCollection.
func (c *ProductCollectionClient) Create() *ProductCollectionCreate {
	mutation := newProductCollectionMutation(c.config, OpCreate)
	return &ProductCollectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductCollection entities.
func (c *ProductCollectionClient) CreateBulk(builders ...*ProductCollectionCreate) *ProductCollectionCreateBulk {
	return &ProductCollectionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductCollection.
func (c *ProductCollectionClient) Update() *ProductCollectionUpdate {
	mutation := newProductCollectionMutation(c.config, OpUpdate)
	return &ProductCollectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductCollectionClient) UpdateOne(pc *ProductCollection) *ProductCollectionUpdateOne {
	mutation := newProductCollectionMutation(c.config, OpUpdateOne, withProductCollection(pc))
	return &ProductCollectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductCollectionClient) UpdateOneID(id int) *ProductCollectionUpdateOne {
	mutation := newProductCollectionMutation(c.config, OpUpdateOne, withProductCollectionID(id))
	return &ProductCollectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductCollection.
func (c *ProductCollectionClient) Delete() *ProductCollectionDelete {
	mutation := newProductCollectionMutation(c.config, OpDelete)
	return &ProductCollectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductCollectionClient) DeleteOne(pc *ProductCollection) *ProductCollectionDeleteOne {
	return c.DeleteOneID(pc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductCollectionClient) DeleteOneID(id int) *ProductCollectionDeleteOne {
	builder := c.Delete().Where(productcollection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductCollectionDeleteOne{builder}
}

// Query returns a query builder for ProductCollection.
func (c *ProductCollectionClient) Query() *ProductCollectionQuery {
	return &ProductCollectionQuery{
		config: c.config,
	}
}

// Get returns a ProductCollection entity by its id.
func (c *ProductCollectionClient) Get(ctx context.Context, id int) (*ProductCollection, error) {
	return c.Query().Where(productcollection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductCollectionClient) GetX(ctx context.Context, id int) *ProductCollection {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductCollectionClient) Hooks() []Hook {
	return c.hooks.ProductCollection
}

// ProductEvaluationClient is a client for the ProductEvaluation schema.
type ProductEvaluationClient struct {
	config
}

// NewProductEvaluationClient returns a client for the ProductEvaluation from the given config.
func NewProductEvaluationClient(c config) *ProductEvaluationClient {
	return &ProductEvaluationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productevaluation.Hooks(f(g(h())))`.
func (c *ProductEvaluationClient) Use(hooks ...Hook) {
	c.hooks.ProductEvaluation = append(c.hooks.ProductEvaluation, hooks...)
}

// Create returns a create builder for ProductEvaluation.
func (c *ProductEvaluationClient) Create() *ProductEvaluationCreate {
	mutation := newProductEvaluationMutation(c.config, OpCreate)
	return &ProductEvaluationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductEvaluation entities.
func (c *ProductEvaluationClient) CreateBulk(builders ...*ProductEvaluationCreate) *ProductEvaluationCreateBulk {
	return &ProductEvaluationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductEvaluation.
func (c *ProductEvaluationClient) Update() *ProductEvaluationUpdate {
	mutation := newProductEvaluationMutation(c.config, OpUpdate)
	return &ProductEvaluationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductEvaluationClient) UpdateOne(pe *ProductEvaluation) *ProductEvaluationUpdateOne {
	mutation := newProductEvaluationMutation(c.config, OpUpdateOne, withProductEvaluation(pe))
	return &ProductEvaluationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductEvaluationClient) UpdateOneID(id int) *ProductEvaluationUpdateOne {
	mutation := newProductEvaluationMutation(c.config, OpUpdateOne, withProductEvaluationID(id))
	return &ProductEvaluationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductEvaluation.
func (c *ProductEvaluationClient) Delete() *ProductEvaluationDelete {
	mutation := newProductEvaluationMutation(c.config, OpDelete)
	return &ProductEvaluationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductEvaluationClient) DeleteOne(pe *ProductEvaluation) *ProductEvaluationDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductEvaluationClient) DeleteOneID(id int) *ProductEvaluationDeleteOne {
	builder := c.Delete().Where(productevaluation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductEvaluationDeleteOne{builder}
}

// Query returns a query builder for ProductEvaluation.
func (c *ProductEvaluationClient) Query() *ProductEvaluationQuery {
	return &ProductEvaluationQuery{
		config: c.config,
	}
}

// Get returns a ProductEvaluation entity by its id.
func (c *ProductEvaluationClient) Get(ctx context.Context, id int) (*ProductEvaluation, error) {
	return c.Query().Where(productevaluation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductEvaluationClient) GetX(ctx context.Context, id int) *ProductEvaluation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductEvaluationClient) Hooks() []Hook {
	return c.hooks.ProductEvaluation
}

// ProductFocusClient is a client for the ProductFocus schema.
type ProductFocusClient struct {
	config
}

// NewProductFocusClient returns a client for the ProductFocus from the given config.
func NewProductFocusClient(c config) *ProductFocusClient {
	return &ProductFocusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productfocus.Hooks(f(g(h())))`.
func (c *ProductFocusClient) Use(hooks ...Hook) {
	c.hooks.ProductFocus = append(c.hooks.ProductFocus, hooks...)
}

// Create returns a create builder for ProductFocus.
func (c *ProductFocusClient) Create() *ProductFocusCreate {
	mutation := newProductFocusMutation(c.config, OpCreate)
	return &ProductFocusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductFocus entities.
func (c *ProductFocusClient) CreateBulk(builders ...*ProductFocusCreate) *ProductFocusCreateBulk {
	return &ProductFocusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductFocus.
func (c *ProductFocusClient) Update() *ProductFocusUpdate {
	mutation := newProductFocusMutation(c.config, OpUpdate)
	return &ProductFocusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductFocusClient) UpdateOne(pf *ProductFocus) *ProductFocusUpdateOne {
	mutation := newProductFocusMutation(c.config, OpUpdateOne, withProductFocus(pf))
	return &ProductFocusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductFocusClient) UpdateOneID(id int) *ProductFocusUpdateOne {
	mutation := newProductFocusMutation(c.config, OpUpdateOne, withProductFocusID(id))
	return &ProductFocusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductFocus.
func (c *ProductFocusClient) Delete() *ProductFocusDelete {
	mutation := newProductFocusMutation(c.config, OpDelete)
	return &ProductFocusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductFocusClient) DeleteOne(pf *ProductFocus) *ProductFocusDeleteOne {
	return c.DeleteOneID(pf.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductFocusClient) DeleteOneID(id int) *ProductFocusDeleteOne {
	builder := c.Delete().Where(productfocus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductFocusDeleteOne{builder}
}

// Query returns a query builder for ProductFocus.
func (c *ProductFocusClient) Query() *ProductFocusQuery {
	return &ProductFocusQuery{
		config: c.config,
	}
}

// Get returns a ProductFocus entity by its id.
func (c *ProductFocusClient) Get(ctx context.Context, id int) (*ProductFocus, error) {
	return c.Query().Where(productfocus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductFocusClient) GetX(ctx context.Context, id int) *ProductFocus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductFocusClient) Hooks() []Hook {
	return c.hooks.ProductFocus
}

// ProductSpecsClient is a client for the ProductSpecs schema.
type ProductSpecsClient struct {
	config
}

// NewProductSpecsClient returns a client for the ProductSpecs from the given config.
func NewProductSpecsClient(c config) *ProductSpecsClient {
	return &ProductSpecsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productspecs.Hooks(f(g(h())))`.
func (c *ProductSpecsClient) Use(hooks ...Hook) {
	c.hooks.ProductSpecs = append(c.hooks.ProductSpecs, hooks...)
}

// Create returns a create builder for ProductSpecs.
func (c *ProductSpecsClient) Create() *ProductSpecsCreate {
	mutation := newProductSpecsMutation(c.config, OpCreate)
	return &ProductSpecsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductSpecs entities.
func (c *ProductSpecsClient) CreateBulk(builders ...*ProductSpecsCreate) *ProductSpecsCreateBulk {
	return &ProductSpecsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductSpecs.
func (c *ProductSpecsClient) Update() *ProductSpecsUpdate {
	mutation := newProductSpecsMutation(c.config, OpUpdate)
	return &ProductSpecsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductSpecsClient) UpdateOne(ps *ProductSpecs) *ProductSpecsUpdateOne {
	mutation := newProductSpecsMutation(c.config, OpUpdateOne, withProductSpecs(ps))
	return &ProductSpecsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductSpecsClient) UpdateOneID(id int) *ProductSpecsUpdateOne {
	mutation := newProductSpecsMutation(c.config, OpUpdateOne, withProductSpecsID(id))
	return &ProductSpecsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductSpecs.
func (c *ProductSpecsClient) Delete() *ProductSpecsDelete {
	mutation := newProductSpecsMutation(c.config, OpDelete)
	return &ProductSpecsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductSpecsClient) DeleteOne(ps *ProductSpecs) *ProductSpecsDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductSpecsClient) DeleteOneID(id int) *ProductSpecsDeleteOne {
	builder := c.Delete().Where(productspecs.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductSpecsDeleteOne{builder}
}

// Query returns a query builder for ProductSpecs.
func (c *ProductSpecsClient) Query() *ProductSpecsQuery {
	return &ProductSpecsQuery{
		config: c.config,
	}
}

// Get returns a ProductSpecs entity by its id.
func (c *ProductSpecsClient) Get(ctx context.Context, id int) (*ProductSpecs, error) {
	return c.Query().Where(productspecs.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductSpecsClient) GetX(ctx context.Context, id int) *ProductSpecs {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductSpecsClient) Hooks() []Hook {
	return c.hooks.ProductSpecs
}

// ReceivingAddressClient is a client for the ReceivingAddress schema.
type ReceivingAddressClient struct {
	config
}

// NewReceivingAddressClient returns a client for the ReceivingAddress from the given config.
func NewReceivingAddressClient(c config) *ReceivingAddressClient {
	return &ReceivingAddressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `receivingaddress.Hooks(f(g(h())))`.
func (c *ReceivingAddressClient) Use(hooks ...Hook) {
	c.hooks.ReceivingAddress = append(c.hooks.ReceivingAddress, hooks...)
}

// Create returns a create builder for ReceivingAddress.
func (c *ReceivingAddressClient) Create() *ReceivingAddressCreate {
	mutation := newReceivingAddressMutation(c.config, OpCreate)
	return &ReceivingAddressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ReceivingAddress entities.
func (c *ReceivingAddressClient) CreateBulk(builders ...*ReceivingAddressCreate) *ReceivingAddressCreateBulk {
	return &ReceivingAddressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ReceivingAddress.
func (c *ReceivingAddressClient) Update() *ReceivingAddressUpdate {
	mutation := newReceivingAddressMutation(c.config, OpUpdate)
	return &ReceivingAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReceivingAddressClient) UpdateOne(ra *ReceivingAddress) *ReceivingAddressUpdateOne {
	mutation := newReceivingAddressMutation(c.config, OpUpdateOne, withReceivingAddress(ra))
	return &ReceivingAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReceivingAddressClient) UpdateOneID(id int) *ReceivingAddressUpdateOne {
	mutation := newReceivingAddressMutation(c.config, OpUpdateOne, withReceivingAddressID(id))
	return &ReceivingAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ReceivingAddress.
func (c *ReceivingAddressClient) Delete() *ReceivingAddressDelete {
	mutation := newReceivingAddressMutation(c.config, OpDelete)
	return &ReceivingAddressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ReceivingAddressClient) DeleteOne(ra *ReceivingAddress) *ReceivingAddressDeleteOne {
	return c.DeleteOneID(ra.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ReceivingAddressClient) DeleteOneID(id int) *ReceivingAddressDeleteOne {
	builder := c.Delete().Where(receivingaddress.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReceivingAddressDeleteOne{builder}
}

// Query returns a query builder for ReceivingAddress.
func (c *ReceivingAddressClient) Query() *ReceivingAddressQuery {
	return &ReceivingAddressQuery{
		config: c.config,
	}
}

// Get returns a ReceivingAddress entity by its id.
func (c *ReceivingAddressClient) Get(ctx context.Context, id int) (*ReceivingAddress, error) {
	return c.Query().Where(receivingaddress.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReceivingAddressClient) GetX(ctx context.Context, id int) *ReceivingAddress {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ReceivingAddressClient) Hooks() []Hook {
	return c.hooks.ReceivingAddress
}

// ShoppingCartClient is a client for the ShoppingCart schema.
type ShoppingCartClient struct {
	config
}

// NewShoppingCartClient returns a client for the ShoppingCart from the given config.
func NewShoppingCartClient(c config) *ShoppingCartClient {
	return &ShoppingCartClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shoppingcart.Hooks(f(g(h())))`.
func (c *ShoppingCartClient) Use(hooks ...Hook) {
	c.hooks.ShoppingCart = append(c.hooks.ShoppingCart, hooks...)
}

// Create returns a create builder for ShoppingCart.
func (c *ShoppingCartClient) Create() *ShoppingCartCreate {
	mutation := newShoppingCartMutation(c.config, OpCreate)
	return &ShoppingCartCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShoppingCart entities.
func (c *ShoppingCartClient) CreateBulk(builders ...*ShoppingCartCreate) *ShoppingCartCreateBulk {
	return &ShoppingCartCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShoppingCart.
func (c *ShoppingCartClient) Update() *ShoppingCartUpdate {
	mutation := newShoppingCartMutation(c.config, OpUpdate)
	return &ShoppingCartUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShoppingCartClient) UpdateOne(sc *ShoppingCart) *ShoppingCartUpdateOne {
	mutation := newShoppingCartMutation(c.config, OpUpdateOne, withShoppingCart(sc))
	return &ShoppingCartUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShoppingCartClient) UpdateOneID(id int) *ShoppingCartUpdateOne {
	mutation := newShoppingCartMutation(c.config, OpUpdateOne, withShoppingCartID(id))
	return &ShoppingCartUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShoppingCart.
func (c *ShoppingCartClient) Delete() *ShoppingCartDelete {
	mutation := newShoppingCartMutation(c.config, OpDelete)
	return &ShoppingCartDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShoppingCartClient) DeleteOne(sc *ShoppingCart) *ShoppingCartDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShoppingCartClient) DeleteOneID(id int) *ShoppingCartDeleteOne {
	builder := c.Delete().Where(shoppingcart.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShoppingCartDeleteOne{builder}
}

// Query returns a query builder for ShoppingCart.
func (c *ShoppingCartClient) Query() *ShoppingCartQuery {
	return &ShoppingCartQuery{
		config: c.config,
	}
}

// Get returns a ShoppingCart entity by its id.
func (c *ShoppingCartClient) Get(ctx context.Context, id int) (*ShoppingCart, error) {
	return c.Query().Where(shoppingcart.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShoppingCartClient) GetX(ctx context.Context, id int) *ShoppingCart {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ShoppingCartClient) Hooks() []Hook {
	return c.hooks.ShoppingCart
}

// SystemConfigClient is a client for the SystemConfig schema.
type SystemConfigClient struct {
	config
}

// NewSystemConfigClient returns a client for the SystemConfig from the given config.
func NewSystemConfigClient(c config) *SystemConfigClient {
	return &SystemConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `systemconfig.Hooks(f(g(h())))`.
func (c *SystemConfigClient) Use(hooks ...Hook) {
	c.hooks.SystemConfig = append(c.hooks.SystemConfig, hooks...)
}

// Create returns a create builder for SystemConfig.
func (c *SystemConfigClient) Create() *SystemConfigCreate {
	mutation := newSystemConfigMutation(c.config, OpCreate)
	return &SystemConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SystemConfig entities.
func (c *SystemConfigClient) CreateBulk(builders ...*SystemConfigCreate) *SystemConfigCreateBulk {
	return &SystemConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SystemConfig.
func (c *SystemConfigClient) Update() *SystemConfigUpdate {
	mutation := newSystemConfigMutation(c.config, OpUpdate)
	return &SystemConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SystemConfigClient) UpdateOne(sc *SystemConfig) *SystemConfigUpdateOne {
	mutation := newSystemConfigMutation(c.config, OpUpdateOne, withSystemConfig(sc))
	return &SystemConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SystemConfigClient) UpdateOneID(id int) *SystemConfigUpdateOne {
	mutation := newSystemConfigMutation(c.config, OpUpdateOne, withSystemConfigID(id))
	return &SystemConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SystemConfig.
func (c *SystemConfigClient) Delete() *SystemConfigDelete {
	mutation := newSystemConfigMutation(c.config, OpDelete)
	return &SystemConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SystemConfigClient) DeleteOne(sc *SystemConfig) *SystemConfigDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SystemConfigClient) DeleteOneID(id int) *SystemConfigDeleteOne {
	builder := c.Delete().Where(systemconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SystemConfigDeleteOne{builder}
}

// Query returns a query builder for SystemConfig.
func (c *SystemConfigClient) Query() *SystemConfigQuery {
	return &SystemConfigQuery{
		config: c.config,
	}
}

// Get returns a SystemConfig entity by its id.
func (c *SystemConfigClient) Get(ctx context.Context, id int) (*SystemConfig, error) {
	return c.Query().Where(systemconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SystemConfigClient) GetX(ctx context.Context, id int) *SystemConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SystemConfigClient) Hooks() []Hook {
	return c.hooks.SystemConfig
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// UserIntegralClient is a client for the UserIntegral schema.
type UserIntegralClient struct {
	config
}

// NewUserIntegralClient returns a client for the UserIntegral from the given config.
func NewUserIntegralClient(c config) *UserIntegralClient {
	return &UserIntegralClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userintegral.Hooks(f(g(h())))`.
func (c *UserIntegralClient) Use(hooks ...Hook) {
	c.hooks.UserIntegral = append(c.hooks.UserIntegral, hooks...)
}

// Create returns a create builder for UserIntegral.
func (c *UserIntegralClient) Create() *UserIntegralCreate {
	mutation := newUserIntegralMutation(c.config, OpCreate)
	return &UserIntegralCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserIntegral entities.
func (c *UserIntegralClient) CreateBulk(builders ...*UserIntegralCreate) *UserIntegralCreateBulk {
	return &UserIntegralCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserIntegral.
func (c *UserIntegralClient) Update() *UserIntegralUpdate {
	mutation := newUserIntegralMutation(c.config, OpUpdate)
	return &UserIntegralUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserIntegralClient) UpdateOne(ui *UserIntegral) *UserIntegralUpdateOne {
	mutation := newUserIntegralMutation(c.config, OpUpdateOne, withUserIntegral(ui))
	return &UserIntegralUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserIntegralClient) UpdateOneID(id int) *UserIntegralUpdateOne {
	mutation := newUserIntegralMutation(c.config, OpUpdateOne, withUserIntegralID(id))
	return &UserIntegralUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserIntegral.
func (c *UserIntegralClient) Delete() *UserIntegralDelete {
	mutation := newUserIntegralMutation(c.config, OpDelete)
	return &UserIntegralDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserIntegralClient) DeleteOne(ui *UserIntegral) *UserIntegralDeleteOne {
	return c.DeleteOneID(ui.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserIntegralClient) DeleteOneID(id int) *UserIntegralDeleteOne {
	builder := c.Delete().Where(userintegral.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserIntegralDeleteOne{builder}
}

// Query returns a query builder for UserIntegral.
func (c *UserIntegralClient) Query() *UserIntegralQuery {
	return &UserIntegralQuery{
		config: c.config,
	}
}

// Get returns a UserIntegral entity by its id.
func (c *UserIntegralClient) Get(ctx context.Context, id int) (*UserIntegral, error) {
	return c.Query().Where(userintegral.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserIntegralClient) GetX(ctx context.Context, id int) *UserIntegral {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserIntegralClient) Hooks() []Hook {
	return c.hooks.UserIntegral
}
