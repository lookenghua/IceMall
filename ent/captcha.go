// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"ice-mall/ent/captcha"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Captcha is the model entity for the Captcha schema.
type Captcha struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// DeletedAt holds the value of the "deletedAt" field.
	// 删除时间
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// Type holds the value of the "type" field.
	// 类型
	Type captcha.Type `json:"type,omitempty"`
	// Phone holds the value of the "phone" field.
	// 手机号
	Phone string `json:"phone,omitempty"`
	// Code holds the value of the "code" field.
	// 验证码
	Code string `json:"code,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Captcha) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case captcha.FieldID:
			values[i] = new(sql.NullInt64)
		case captcha.FieldType, captcha.FieldPhone, captcha.FieldCode:
			values[i] = new(sql.NullString)
		case captcha.FieldCreatedAt, captcha.FieldUpdatedAt, captcha.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Captcha", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Captcha fields.
func (c *Captcha) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case captcha.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case captcha.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case captcha.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case captcha.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedAt", values[i])
			} else if value.Valid {
				c.DeletedAt = new(time.Time)
				*c.DeletedAt = value.Time
			}
		case captcha.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = captcha.Type(value.String)
			}
		case captcha.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				c.Phone = value.String
			}
		case captcha.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				c.Code = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Captcha.
// Note that you need to call Captcha.Unwrap() before calling this method if this Captcha
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Captcha) Update() *CaptchaUpdateOne {
	return (&CaptchaClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Captcha entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Captcha) Unwrap() *Captcha {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Captcha is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Captcha) String() string {
	var builder strings.Builder
	builder.WriteString("Captcha(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", createdAt=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	if v := c.DeletedAt; v != nil {
		builder.WriteString(", deletedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", c.Type))
	builder.WriteString(", phone=")
	builder.WriteString(c.Phone)
	builder.WriteString(", code=")
	builder.WriteString(c.Code)
	builder.WriteByte(')')
	return builder.String()
}

// Captchas is a parsable slice of Captcha.
type Captchas []*Captcha

func (c Captchas) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
