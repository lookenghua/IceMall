// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ice-mall/ent/predicate"
	"ice-mall/ent/productattributevalue"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductAttributeValueQuery is the builder for querying ProductAttributeValue entities.
type ProductAttributeValueQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ProductAttributeValue
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProductAttributeValueQuery builder.
func (pavq *ProductAttributeValueQuery) Where(ps ...predicate.ProductAttributeValue) *ProductAttributeValueQuery {
	pavq.predicates = append(pavq.predicates, ps...)
	return pavq
}

// Limit adds a limit step to the query.
func (pavq *ProductAttributeValueQuery) Limit(limit int) *ProductAttributeValueQuery {
	pavq.limit = &limit
	return pavq
}

// Offset adds an offset step to the query.
func (pavq *ProductAttributeValueQuery) Offset(offset int) *ProductAttributeValueQuery {
	pavq.offset = &offset
	return pavq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pavq *ProductAttributeValueQuery) Unique(unique bool) *ProductAttributeValueQuery {
	pavq.unique = &unique
	return pavq
}

// Order adds an order step to the query.
func (pavq *ProductAttributeValueQuery) Order(o ...OrderFunc) *ProductAttributeValueQuery {
	pavq.order = append(pavq.order, o...)
	return pavq
}

// First returns the first ProductAttributeValue entity from the query.
// Returns a *NotFoundError when no ProductAttributeValue was found.
func (pavq *ProductAttributeValueQuery) First(ctx context.Context) (*ProductAttributeValue, error) {
	nodes, err := pavq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{productattributevalue.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pavq *ProductAttributeValueQuery) FirstX(ctx context.Context) *ProductAttributeValue {
	node, err := pavq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProductAttributeValue ID from the query.
// Returns a *NotFoundError when no ProductAttributeValue ID was found.
func (pavq *ProductAttributeValueQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pavq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{productattributevalue.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pavq *ProductAttributeValueQuery) FirstIDX(ctx context.Context) int {
	id, err := pavq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProductAttributeValue entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProductAttributeValue entity is found.
// Returns a *NotFoundError when no ProductAttributeValue entities are found.
func (pavq *ProductAttributeValueQuery) Only(ctx context.Context) (*ProductAttributeValue, error) {
	nodes, err := pavq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{productattributevalue.Label}
	default:
		return nil, &NotSingularError{productattributevalue.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pavq *ProductAttributeValueQuery) OnlyX(ctx context.Context) *ProductAttributeValue {
	node, err := pavq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProductAttributeValue ID in the query.
// Returns a *NotSingularError when more than one ProductAttributeValue ID is found.
// Returns a *NotFoundError when no entities are found.
func (pavq *ProductAttributeValueQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pavq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{productattributevalue.Label}
	default:
		err = &NotSingularError{productattributevalue.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pavq *ProductAttributeValueQuery) OnlyIDX(ctx context.Context) int {
	id, err := pavq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProductAttributeValues.
func (pavq *ProductAttributeValueQuery) All(ctx context.Context) ([]*ProductAttributeValue, error) {
	if err := pavq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return pavq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (pavq *ProductAttributeValueQuery) AllX(ctx context.Context) []*ProductAttributeValue {
	nodes, err := pavq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProductAttributeValue IDs.
func (pavq *ProductAttributeValueQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := pavq.Select(productattributevalue.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pavq *ProductAttributeValueQuery) IDsX(ctx context.Context) []int {
	ids, err := pavq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pavq *ProductAttributeValueQuery) Count(ctx context.Context) (int, error) {
	if err := pavq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return pavq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (pavq *ProductAttributeValueQuery) CountX(ctx context.Context) int {
	count, err := pavq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pavq *ProductAttributeValueQuery) Exist(ctx context.Context) (bool, error) {
	if err := pavq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return pavq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (pavq *ProductAttributeValueQuery) ExistX(ctx context.Context) bool {
	exist, err := pavq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProductAttributeValueQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pavq *ProductAttributeValueQuery) Clone() *ProductAttributeValueQuery {
	if pavq == nil {
		return nil
	}
	return &ProductAttributeValueQuery{
		config:     pavq.config,
		limit:      pavq.limit,
		offset:     pavq.offset,
		order:      append([]OrderFunc{}, pavq.order...),
		predicates: append([]predicate.ProductAttributeValue{}, pavq.predicates...),
		// clone intermediate query.
		sql:    pavq.sql.Clone(),
		path:   pavq.path,
		unique: pavq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (pavq *ProductAttributeValueQuery) GroupBy(field string, fields ...string) *ProductAttributeValueGroupBy {
	group := &ProductAttributeValueGroupBy{config: pavq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := pavq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return pavq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (pavq *ProductAttributeValueQuery) Select(fields ...string) *ProductAttributeValueSelect {
	pavq.fields = append(pavq.fields, fields...)
	return &ProductAttributeValueSelect{ProductAttributeValueQuery: pavq}
}

func (pavq *ProductAttributeValueQuery) prepareQuery(ctx context.Context) error {
	for _, f := range pavq.fields {
		if !productattributevalue.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pavq.path != nil {
		prev, err := pavq.path(ctx)
		if err != nil {
			return err
		}
		pavq.sql = prev
	}
	return nil
}

func (pavq *ProductAttributeValueQuery) sqlAll(ctx context.Context) ([]*ProductAttributeValue, error) {
	var (
		nodes = []*ProductAttributeValue{}
		_spec = pavq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &ProductAttributeValue{config: pavq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, pavq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (pavq *ProductAttributeValueQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pavq.querySpec()
	_spec.Node.Columns = pavq.fields
	if len(pavq.fields) > 0 {
		_spec.Unique = pavq.unique != nil && *pavq.unique
	}
	return sqlgraph.CountNodes(ctx, pavq.driver, _spec)
}

func (pavq *ProductAttributeValueQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := pavq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (pavq *ProductAttributeValueQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productattributevalue.Table,
			Columns: productattributevalue.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productattributevalue.FieldID,
			},
		},
		From:   pavq.sql,
		Unique: true,
	}
	if unique := pavq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := pavq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productattributevalue.FieldID)
		for i := range fields {
			if fields[i] != productattributevalue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pavq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pavq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pavq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pavq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pavq *ProductAttributeValueQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pavq.driver.Dialect())
	t1 := builder.Table(productattributevalue.Table)
	columns := pavq.fields
	if len(columns) == 0 {
		columns = productattributevalue.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pavq.sql != nil {
		selector = pavq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pavq.unique != nil && *pavq.unique {
		selector.Distinct()
	}
	for _, p := range pavq.predicates {
		p(selector)
	}
	for _, p := range pavq.order {
		p(selector)
	}
	if offset := pavq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pavq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProductAttributeValueGroupBy is the group-by builder for ProductAttributeValue entities.
type ProductAttributeValueGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pavgb *ProductAttributeValueGroupBy) Aggregate(fns ...AggregateFunc) *ProductAttributeValueGroupBy {
	pavgb.fns = append(pavgb.fns, fns...)
	return pavgb
}

// Scan applies the group-by query and scans the result into the given value.
func (pavgb *ProductAttributeValueGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := pavgb.path(ctx)
	if err != nil {
		return err
	}
	pavgb.sql = query
	return pavgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pavgb *ProductAttributeValueGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := pavgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (pavgb *ProductAttributeValueGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(pavgb.fields) > 1 {
		return nil, errors.New("ent: ProductAttributeValueGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := pavgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pavgb *ProductAttributeValueGroupBy) StringsX(ctx context.Context) []string {
	v, err := pavgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pavgb *ProductAttributeValueGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pavgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productattributevalue.Label}
	default:
		err = fmt.Errorf("ent: ProductAttributeValueGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pavgb *ProductAttributeValueGroupBy) StringX(ctx context.Context) string {
	v, err := pavgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (pavgb *ProductAttributeValueGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(pavgb.fields) > 1 {
		return nil, errors.New("ent: ProductAttributeValueGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := pavgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pavgb *ProductAttributeValueGroupBy) IntsX(ctx context.Context) []int {
	v, err := pavgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pavgb *ProductAttributeValueGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pavgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productattributevalue.Label}
	default:
		err = fmt.Errorf("ent: ProductAttributeValueGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pavgb *ProductAttributeValueGroupBy) IntX(ctx context.Context) int {
	v, err := pavgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (pavgb *ProductAttributeValueGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(pavgb.fields) > 1 {
		return nil, errors.New("ent: ProductAttributeValueGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := pavgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pavgb *ProductAttributeValueGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := pavgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pavgb *ProductAttributeValueGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pavgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productattributevalue.Label}
	default:
		err = fmt.Errorf("ent: ProductAttributeValueGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pavgb *ProductAttributeValueGroupBy) Float64X(ctx context.Context) float64 {
	v, err := pavgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (pavgb *ProductAttributeValueGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(pavgb.fields) > 1 {
		return nil, errors.New("ent: ProductAttributeValueGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := pavgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pavgb *ProductAttributeValueGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := pavgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pavgb *ProductAttributeValueGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pavgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productattributevalue.Label}
	default:
		err = fmt.Errorf("ent: ProductAttributeValueGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pavgb *ProductAttributeValueGroupBy) BoolX(ctx context.Context) bool {
	v, err := pavgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pavgb *ProductAttributeValueGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range pavgb.fields {
		if !productattributevalue.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := pavgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pavgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pavgb *ProductAttributeValueGroupBy) sqlQuery() *sql.Selector {
	selector := pavgb.sql.Select()
	aggregation := make([]string, 0, len(pavgb.fns))
	for _, fn := range pavgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(pavgb.fields)+len(pavgb.fns))
		for _, f := range pavgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(pavgb.fields...)...)
}

// ProductAttributeValueSelect is the builder for selecting fields of ProductAttributeValue entities.
type ProductAttributeValueSelect struct {
	*ProductAttributeValueQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (pavs *ProductAttributeValueSelect) Scan(ctx context.Context, v interface{}) error {
	if err := pavs.prepareQuery(ctx); err != nil {
		return err
	}
	pavs.sql = pavs.ProductAttributeValueQuery.sqlQuery(ctx)
	return pavs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pavs *ProductAttributeValueSelect) ScanX(ctx context.Context, v interface{}) {
	if err := pavs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (pavs *ProductAttributeValueSelect) Strings(ctx context.Context) ([]string, error) {
	if len(pavs.fields) > 1 {
		return nil, errors.New("ent: ProductAttributeValueSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := pavs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pavs *ProductAttributeValueSelect) StringsX(ctx context.Context) []string {
	v, err := pavs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (pavs *ProductAttributeValueSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pavs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productattributevalue.Label}
	default:
		err = fmt.Errorf("ent: ProductAttributeValueSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pavs *ProductAttributeValueSelect) StringX(ctx context.Context) string {
	v, err := pavs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (pavs *ProductAttributeValueSelect) Ints(ctx context.Context) ([]int, error) {
	if len(pavs.fields) > 1 {
		return nil, errors.New("ent: ProductAttributeValueSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := pavs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pavs *ProductAttributeValueSelect) IntsX(ctx context.Context) []int {
	v, err := pavs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (pavs *ProductAttributeValueSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pavs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productattributevalue.Label}
	default:
		err = fmt.Errorf("ent: ProductAttributeValueSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pavs *ProductAttributeValueSelect) IntX(ctx context.Context) int {
	v, err := pavs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (pavs *ProductAttributeValueSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(pavs.fields) > 1 {
		return nil, errors.New("ent: ProductAttributeValueSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := pavs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pavs *ProductAttributeValueSelect) Float64sX(ctx context.Context) []float64 {
	v, err := pavs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (pavs *ProductAttributeValueSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pavs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productattributevalue.Label}
	default:
		err = fmt.Errorf("ent: ProductAttributeValueSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pavs *ProductAttributeValueSelect) Float64X(ctx context.Context) float64 {
	v, err := pavs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (pavs *ProductAttributeValueSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(pavs.fields) > 1 {
		return nil, errors.New("ent: ProductAttributeValueSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := pavs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pavs *ProductAttributeValueSelect) BoolsX(ctx context.Context) []bool {
	v, err := pavs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (pavs *ProductAttributeValueSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pavs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{productattributevalue.Label}
	default:
		err = fmt.Errorf("ent: ProductAttributeValueSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pavs *ProductAttributeValueSelect) BoolX(ctx context.Context) bool {
	v, err := pavs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pavs *ProductAttributeValueSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := pavs.sql.Query()
	if err := pavs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
