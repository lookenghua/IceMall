// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"ice-mall/ent/shoppingcart"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// ShoppingCart is the model entity for the ShoppingCart schema.
type ShoppingCart struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShoppingCart) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case shoppingcart.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ShoppingCart", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShoppingCart fields.
func (sc *ShoppingCart) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shoppingcart.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sc.ID = int(value.Int64)
		}
	}
	return nil
}

// Update returns a builder for updating this ShoppingCart.
// Note that you need to call ShoppingCart.Unwrap() before calling this method if this ShoppingCart
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *ShoppingCart) Update() *ShoppingCartUpdateOne {
	return (&ShoppingCartClient{config: sc.config}).UpdateOne(sc)
}

// Unwrap unwraps the ShoppingCart entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *ShoppingCart) Unwrap() *ShoppingCart {
	tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShoppingCart is not a transactional entity")
	}
	sc.config.driver = tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *ShoppingCart) String() string {
	var builder strings.Builder
	builder.WriteString("ShoppingCart(")
	builder.WriteString(fmt.Sprintf("id=%v", sc.ID))
	builder.WriteByte(')')
	return builder.String()
}

// ShoppingCarts is a parsable slice of ShoppingCart.
type ShoppingCarts []*ShoppingCart

func (sc ShoppingCarts) config(cfg config) {
	for _i := range sc {
		sc[_i].config = cfg
	}
}
