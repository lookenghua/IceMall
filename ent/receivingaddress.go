// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"ice-mall/ent/receivingaddress"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// ReceivingAddress is the model entity for the ReceivingAddress schema.
type ReceivingAddress struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReceivingAddress) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case receivingaddress.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ReceivingAddress", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReceivingAddress fields.
func (ra *ReceivingAddress) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case receivingaddress.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ra.ID = int(value.Int64)
		}
	}
	return nil
}

// Update returns a builder for updating this ReceivingAddress.
// Note that you need to call ReceivingAddress.Unwrap() before calling this method if this ReceivingAddress
// was returned from a transaction, and the transaction was committed or rolled back.
func (ra *ReceivingAddress) Update() *ReceivingAddressUpdateOne {
	return (&ReceivingAddressClient{config: ra.config}).UpdateOne(ra)
}

// Unwrap unwraps the ReceivingAddress entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ra *ReceivingAddress) Unwrap() *ReceivingAddress {
	tx, ok := ra.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReceivingAddress is not a transactional entity")
	}
	ra.config.driver = tx.drv
	return ra
}

// String implements the fmt.Stringer.
func (ra *ReceivingAddress) String() string {
	var builder strings.Builder
	builder.WriteString("ReceivingAddress(")
	builder.WriteString(fmt.Sprintf("id=%v", ra.ID))
	builder.WriteByte(')')
	return builder.String()
}

// ReceivingAddresses is a parsable slice of ReceivingAddress.
type ReceivingAddresses []*ReceivingAddress

func (ra ReceivingAddresses) config(cfg config) {
	for _i := range ra {
		ra[_i].config = cfg
	}
}
