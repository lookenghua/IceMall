// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ice-mall/ent/homebanner"
	"ice-mall/ent/predicate"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HomeBannerQuery is the builder for querying HomeBanner entities.
type HomeBannerQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.HomeBanner
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HomeBannerQuery builder.
func (hbq *HomeBannerQuery) Where(ps ...predicate.HomeBanner) *HomeBannerQuery {
	hbq.predicates = append(hbq.predicates, ps...)
	return hbq
}

// Limit adds a limit step to the query.
func (hbq *HomeBannerQuery) Limit(limit int) *HomeBannerQuery {
	hbq.limit = &limit
	return hbq
}

// Offset adds an offset step to the query.
func (hbq *HomeBannerQuery) Offset(offset int) *HomeBannerQuery {
	hbq.offset = &offset
	return hbq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hbq *HomeBannerQuery) Unique(unique bool) *HomeBannerQuery {
	hbq.unique = &unique
	return hbq
}

// Order adds an order step to the query.
func (hbq *HomeBannerQuery) Order(o ...OrderFunc) *HomeBannerQuery {
	hbq.order = append(hbq.order, o...)
	return hbq
}

// First returns the first HomeBanner entity from the query.
// Returns a *NotFoundError when no HomeBanner was found.
func (hbq *HomeBannerQuery) First(ctx context.Context) (*HomeBanner, error) {
	nodes, err := hbq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{homebanner.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hbq *HomeBannerQuery) FirstX(ctx context.Context) *HomeBanner {
	node, err := hbq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HomeBanner ID from the query.
// Returns a *NotFoundError when no HomeBanner ID was found.
func (hbq *HomeBannerQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hbq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{homebanner.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hbq *HomeBannerQuery) FirstIDX(ctx context.Context) int {
	id, err := hbq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HomeBanner entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HomeBanner entity is found.
// Returns a *NotFoundError when no HomeBanner entities are found.
func (hbq *HomeBannerQuery) Only(ctx context.Context) (*HomeBanner, error) {
	nodes, err := hbq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{homebanner.Label}
	default:
		return nil, &NotSingularError{homebanner.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hbq *HomeBannerQuery) OnlyX(ctx context.Context) *HomeBanner {
	node, err := hbq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HomeBanner ID in the query.
// Returns a *NotSingularError when more than one HomeBanner ID is found.
// Returns a *NotFoundError when no entities are found.
func (hbq *HomeBannerQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = hbq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{homebanner.Label}
	default:
		err = &NotSingularError{homebanner.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hbq *HomeBannerQuery) OnlyIDX(ctx context.Context) int {
	id, err := hbq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HomeBanners.
func (hbq *HomeBannerQuery) All(ctx context.Context) ([]*HomeBanner, error) {
	if err := hbq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return hbq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (hbq *HomeBannerQuery) AllX(ctx context.Context) []*HomeBanner {
	nodes, err := hbq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HomeBanner IDs.
func (hbq *HomeBannerQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := hbq.Select(homebanner.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hbq *HomeBannerQuery) IDsX(ctx context.Context) []int {
	ids, err := hbq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hbq *HomeBannerQuery) Count(ctx context.Context) (int, error) {
	if err := hbq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return hbq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (hbq *HomeBannerQuery) CountX(ctx context.Context) int {
	count, err := hbq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hbq *HomeBannerQuery) Exist(ctx context.Context) (bool, error) {
	if err := hbq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return hbq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (hbq *HomeBannerQuery) ExistX(ctx context.Context) bool {
	exist, err := hbq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HomeBannerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hbq *HomeBannerQuery) Clone() *HomeBannerQuery {
	if hbq == nil {
		return nil
	}
	return &HomeBannerQuery{
		config:     hbq.config,
		limit:      hbq.limit,
		offset:     hbq.offset,
		order:      append([]OrderFunc{}, hbq.order...),
		predicates: append([]predicate.HomeBanner{}, hbq.predicates...),
		// clone intermediate query.
		sql:    hbq.sql.Clone(),
		path:   hbq.path,
		unique: hbq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (hbq *HomeBannerQuery) GroupBy(field string, fields ...string) *HomeBannerGroupBy {
	group := &HomeBannerGroupBy{config: hbq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := hbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return hbq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (hbq *HomeBannerQuery) Select(fields ...string) *HomeBannerSelect {
	hbq.fields = append(hbq.fields, fields...)
	return &HomeBannerSelect{HomeBannerQuery: hbq}
}

func (hbq *HomeBannerQuery) prepareQuery(ctx context.Context) error {
	for _, f := range hbq.fields {
		if !homebanner.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if hbq.path != nil {
		prev, err := hbq.path(ctx)
		if err != nil {
			return err
		}
		hbq.sql = prev
	}
	return nil
}

func (hbq *HomeBannerQuery) sqlAll(ctx context.Context) ([]*HomeBanner, error) {
	var (
		nodes = []*HomeBanner{}
		_spec = hbq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &HomeBanner{config: hbq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, hbq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (hbq *HomeBannerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hbq.querySpec()
	_spec.Node.Columns = hbq.fields
	if len(hbq.fields) > 0 {
		_spec.Unique = hbq.unique != nil && *hbq.unique
	}
	return sqlgraph.CountNodes(ctx, hbq.driver, _spec)
}

func (hbq *HomeBannerQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := hbq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (hbq *HomeBannerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   homebanner.Table,
			Columns: homebanner.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: homebanner.FieldID,
			},
		},
		From:   hbq.sql,
		Unique: true,
	}
	if unique := hbq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := hbq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, homebanner.FieldID)
		for i := range fields {
			if fields[i] != homebanner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := hbq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hbq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hbq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hbq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hbq *HomeBannerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hbq.driver.Dialect())
	t1 := builder.Table(homebanner.Table)
	columns := hbq.fields
	if len(columns) == 0 {
		columns = homebanner.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hbq.sql != nil {
		selector = hbq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hbq.unique != nil && *hbq.unique {
		selector.Distinct()
	}
	for _, p := range hbq.predicates {
		p(selector)
	}
	for _, p := range hbq.order {
		p(selector)
	}
	if offset := hbq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hbq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// HomeBannerGroupBy is the group-by builder for HomeBanner entities.
type HomeBannerGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hbgb *HomeBannerGroupBy) Aggregate(fns ...AggregateFunc) *HomeBannerGroupBy {
	hbgb.fns = append(hbgb.fns, fns...)
	return hbgb
}

// Scan applies the group-by query and scans the result into the given value.
func (hbgb *HomeBannerGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := hbgb.path(ctx)
	if err != nil {
		return err
	}
	hbgb.sql = query
	return hbgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (hbgb *HomeBannerGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := hbgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (hbgb *HomeBannerGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(hbgb.fields) > 1 {
		return nil, errors.New("ent: HomeBannerGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := hbgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (hbgb *HomeBannerGroupBy) StringsX(ctx context.Context) []string {
	v, err := hbgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (hbgb *HomeBannerGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = hbgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{homebanner.Label}
	default:
		err = fmt.Errorf("ent: HomeBannerGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (hbgb *HomeBannerGroupBy) StringX(ctx context.Context) string {
	v, err := hbgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (hbgb *HomeBannerGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(hbgb.fields) > 1 {
		return nil, errors.New("ent: HomeBannerGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := hbgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (hbgb *HomeBannerGroupBy) IntsX(ctx context.Context) []int {
	v, err := hbgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (hbgb *HomeBannerGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = hbgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{homebanner.Label}
	default:
		err = fmt.Errorf("ent: HomeBannerGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (hbgb *HomeBannerGroupBy) IntX(ctx context.Context) int {
	v, err := hbgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (hbgb *HomeBannerGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(hbgb.fields) > 1 {
		return nil, errors.New("ent: HomeBannerGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := hbgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (hbgb *HomeBannerGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := hbgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (hbgb *HomeBannerGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = hbgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{homebanner.Label}
	default:
		err = fmt.Errorf("ent: HomeBannerGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (hbgb *HomeBannerGroupBy) Float64X(ctx context.Context) float64 {
	v, err := hbgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (hbgb *HomeBannerGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(hbgb.fields) > 1 {
		return nil, errors.New("ent: HomeBannerGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := hbgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (hbgb *HomeBannerGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := hbgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (hbgb *HomeBannerGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = hbgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{homebanner.Label}
	default:
		err = fmt.Errorf("ent: HomeBannerGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (hbgb *HomeBannerGroupBy) BoolX(ctx context.Context) bool {
	v, err := hbgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (hbgb *HomeBannerGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range hbgb.fields {
		if !homebanner.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := hbgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hbgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (hbgb *HomeBannerGroupBy) sqlQuery() *sql.Selector {
	selector := hbgb.sql.Select()
	aggregation := make([]string, 0, len(hbgb.fns))
	for _, fn := range hbgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(hbgb.fields)+len(hbgb.fns))
		for _, f := range hbgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(hbgb.fields...)...)
}

// HomeBannerSelect is the builder for selecting fields of HomeBanner entities.
type HomeBannerSelect struct {
	*HomeBannerQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (hbs *HomeBannerSelect) Scan(ctx context.Context, v interface{}) error {
	if err := hbs.prepareQuery(ctx); err != nil {
		return err
	}
	hbs.sql = hbs.HomeBannerQuery.sqlQuery(ctx)
	return hbs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (hbs *HomeBannerSelect) ScanX(ctx context.Context, v interface{}) {
	if err := hbs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (hbs *HomeBannerSelect) Strings(ctx context.Context) ([]string, error) {
	if len(hbs.fields) > 1 {
		return nil, errors.New("ent: HomeBannerSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := hbs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (hbs *HomeBannerSelect) StringsX(ctx context.Context) []string {
	v, err := hbs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (hbs *HomeBannerSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = hbs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{homebanner.Label}
	default:
		err = fmt.Errorf("ent: HomeBannerSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (hbs *HomeBannerSelect) StringX(ctx context.Context) string {
	v, err := hbs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (hbs *HomeBannerSelect) Ints(ctx context.Context) ([]int, error) {
	if len(hbs.fields) > 1 {
		return nil, errors.New("ent: HomeBannerSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := hbs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (hbs *HomeBannerSelect) IntsX(ctx context.Context) []int {
	v, err := hbs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (hbs *HomeBannerSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = hbs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{homebanner.Label}
	default:
		err = fmt.Errorf("ent: HomeBannerSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (hbs *HomeBannerSelect) IntX(ctx context.Context) int {
	v, err := hbs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (hbs *HomeBannerSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(hbs.fields) > 1 {
		return nil, errors.New("ent: HomeBannerSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := hbs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (hbs *HomeBannerSelect) Float64sX(ctx context.Context) []float64 {
	v, err := hbs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (hbs *HomeBannerSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = hbs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{homebanner.Label}
	default:
		err = fmt.Errorf("ent: HomeBannerSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (hbs *HomeBannerSelect) Float64X(ctx context.Context) float64 {
	v, err := hbs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (hbs *HomeBannerSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(hbs.fields) > 1 {
		return nil, errors.New("ent: HomeBannerSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := hbs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (hbs *HomeBannerSelect) BoolsX(ctx context.Context) []bool {
	v, err := hbs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (hbs *HomeBannerSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = hbs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{homebanner.Label}
	default:
		err = fmt.Errorf("ent: HomeBannerSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (hbs *HomeBannerSelect) BoolX(ctx context.Context) bool {
	v, err := hbs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (hbs *HomeBannerSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := hbs.sql.Query()
	if err := hbs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
